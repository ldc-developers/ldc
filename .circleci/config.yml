version: 2
jobs:
  build:
    docker:
      - image: gcc
    environment:
      - LLVM_VERSION: 5.0.0
      - HOST_LDC_VERSION: 1.3.0
    steps:
      - checkout
      - run:
          name: Checkout git submodules
          command: git submodule update --init
      - run:
          name: Install basic dependencies
          command: |
            apt update
            apt install -y software-properties-common cmake ninja-build gdb python-pip unzip
            pip install --user lit
            # Use ld.gold per default, so that LTO is tested.
            update-alternatives --install /usr/bin/ld ld /usr/bin/ld.gold 99
            g++ --version
            ld --version
            cmake --version
            ninja --version
            gdb --version
            python -c "import lit; lit.main();" --version | head -n 1
      - restore_cache:
          keys:
            - llvm-5.0.0
            - host-ldc-{{ .Environment.HOST_LDC_VERSION }}
      - run:
          name: Install LLVM 5.0.0
          command: |
            if [[ ! -d llvm-$LLVM_VERSION ]]; then
              wget -O llvm-$LLVM_VERSION.tar.xz http://releases.llvm.org/$LLVM_VERSION/clang+llvm-$LLVM_VERSION-linux-x86_64-ubuntu16.04.tar.xz
              mkdir llvm-$LLVM_VERSION
              tar -xpf llvm-$LLVM_VERSION.tar.xz --strip 1 -C llvm-$LLVM_VERSION
            fi
      - save_cache:
          key: llvm-5.0.0
          paths:
            - llvm-5.0.0
      - run:
          name: Install LDC host compiler
          command: |
            if [[ ! -e ldc2-$HOST_LDC_VERSION-linux-x86_64/bin/ldmd2 ]]; then
              wget https://github.com/ldc-developers/ldc/releases/download/v$HOST_LDC_VERSION/ldc2-$HOST_LDC_VERSION-linux-x86_64.tar.xz
              tar -xf ldc2-$HOST_LDC_VERSION-linux-x86_64.tar.xz
            fi
      - save_cache:
          key: host-ldc-{{ .Environment.HOST_LDC_VERSION }}
          paths:
            - ldc2-$HOST_LDC_VERSION-linux-x86_64
      - run:
          name: Build bootstrap LDC
          command: |
            export HOST_LDMD=$PWD/ldc2-$HOST_LDC_VERSION-linux-x86_64/bin/ldmd2
            mkdir bootstrap
            cd bootstrap
            cmake -G Ninja -DLLVM_ROOT_DIR=$PWD/../llvm-$LLVM_VERSION -DBUILD_SHARED_LIBS=OFF -DD_COMPILER=$HOST_LDMD ..
            ninja -j3
            bin/ldc2 -version
            cd ..
      - run:
          name: Build LDC and stdlib unittest runners
          command: |
            export HOST_LDMD=$PWD/bootstrap/bin/ldmd2
            mkdir build
            cd build
            cmake -G Ninja -DLLVM_ROOT_DIR=$PWD/../llvm-$LLVM_VERSION -DLDC_INSTALL_LTOPLUGIN=ON -DLDC_INSTALL_LLVM_RUNTIME_LIBS=ON -DD_COMPILER=$HOST_LDMD ..
            ninja -j3 all all-test-runners
            bin/ldc2 -version
            cd ..
      - run:
          name: Build and run LDC D unittests
          command: cd build && ctest --output-on-failure -R ldc2-unittest
          when: always
      - run:
          name: Run LIT testsuite
          command: cd build && ctest -V -R lit-tests
          when: always
      - run:
          name: Run DMD testsuite
          command: cd build && DMD_TESTSUITE_MAKE_ARGS=-j3 ctest -V -R dmd-testsuite
          when: always
      - run:
          name: Run stdlib unittests
          command: cd build && ctest -j3 --output-on-failure -E "dmd-testsuite|ldc2-unittest|lit-tests"
          when: always
