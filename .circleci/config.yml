commonSteps: &commonSteps
  steps:
    # Each step starts in the checked-out source directory.
    - run:
        name: Install prerequisites
        command: |
          set -x
          cd ..
          if [ "$CI_OS" = "linux" ]; then
            export DEBIAN_FRONTEND=noninteractive
            dpkg --add-architecture i386
            apt-get -q update
            apt-get -yq install \
              git-core cmake ninja-build g++-multilib \
              llvm-dev zlib1g-dev libclang-common-$LIBCLANG_COMMON_VERSION-dev \
              libcurl4 libcurl4:i386 \
              curl gdb python tzdata unzip zip \
              $EXTRA_APT_PACKAGES
            # Use ld.gold per default, so that LTO is tested
            update-alternatives --install /usr/bin/ld ld /usr/bin/ld.gold 99
          else
            # Download & extract CMake
            curl -L -o cmake.tar.gz https://github.com/Kitware/CMake/releases/download/v3.16.5/cmake-3.16.5-Darwin-x86_64.tar.gz
            mkdir cmake
            tar -xf cmake.tar.gz --strip 3 -C cmake
            rm cmake.tar.gz
            # Download & extract Ninja
            curl -OL https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-mac.zip
            mkdir ninja
            tar -xf ninja-mac.zip -C ninja
            rm ninja-mac.zip
            # Download & extract LDC-flavoured LLVM with enabled assertions
            curl -L -o llvm.tar.xz https://github.com/ldc-developers/llvm-project/releases/download/ldc-v$LLVM_VERSION/llvm-$LLVM_VERSION-osx-x86_64-withAsserts.tar.xz
            mkdir llvm
            tar -xf llvm.tar.xz --strip 1 -C llvm
            rm llvm.tar.xz
            # Add CMake, Ninja and LLVM to PATH for future steps
            echo "export PATH=$PWD/cmake/bin:$PWD/ninja:$PWD/llvm/bin:$PATH" >> $BASH_ENV
          fi
          # Install pip
          curl --max-time 300 --retry 3 -OL https://bootstrap.pypa.io/get-pip.py
          python get-pip.py --user
          rm get-pip.py
          # Install lit
          python -m pip install --user lit
          python -c "import lit; lit.main();" --version . | head -n 1
          # Download & extract host LDC
          curl -L -o ldc2.tar.xz https://github.com/ldc-developers/ldc/releases/download/v$HOST_LDC_VERSION/ldc2-$HOST_LDC_VERSION-$CI_OS-x86_64.tar.xz
          mkdir host-ldc
          tar -xf ldc2.tar.xz --strip 1 -C host-ldc
          rm ldc2.tar.xz
    - checkout
    - run:
        name: Checkout git submodules
        command: git submodule update --init
    - run:
        name: Build LDC & LDC D unittests & defaultlib unittest runners
        command: |
          set -x
          cd ..
          cmake --version
          ninja --version
          mkdir build
          cd build
          cmake -G Ninja $CIRCLE_WORKING_DIRECTORY \
            -DCMAKE_BUILD_TYPE=Release \
            -DD_COMPILER=$PWD/../host-ldc/bin/ldmd2 \
            $EXTRA_CMAKE_FLAGS
          # Work around out-of-memory errors - retry twice with parallelization and one last time serially
          targets='all ldc2-unittest all-test-runners'
          for i in {1..3}; do
            ninja -j$PARALLELISM $targets && break || true
          done
          ninja -j1 $targets
          bin/ldc2 -version
    - run:
        name: Run LDC D unittests
        when: always
        command: cd ../build && ctest --output-on-failure -R ldc2-unittest
    - run:
        name: Run LIT testsuite
        when: always
        command: cd ../build/tests && python runlit.py -v -j $PARALLELISM .
    - run:
        name: Run DMD testsuite
        when: always
        command: |
          cd ../build
          if [ "$CI_OS" = "linux" ]; then
            # Circle's RAM disk FS apparently doesn't allow long paths.
            rm ../project/tests/d2/dmd-testsuite/compilable/issue17167.sh
          fi
          DMD_TESTSUITE_MAKE_ARGS=-j$PARALLELISM ctest -V -R dmd-testsuite
    - run:
        name: Run defaultlib unittests & druntime stand-alone tests
        when: always
        command: cd ../build && ctest -j$PARALLELISM --output-on-failure -E "dmd-testsuite|ldc2-unittest|lit-tests"

version: 2
jobs:
  Ubuntu-18.04-multilib-rtSanitizers:
    <<: *commonSteps
    docker:
      - image: ubuntu:18.04
    environment:
      - PARALLELISM: 2
      - CI_OS: linux
      - LIBCLANG_COMMON_VERSION: "6.0"
      - HOST_LDC_VERSION: 1.20.1
      - EXTRA_CMAKE_FLAGS: "-DMULTILIB=ON -DRT_SUPPORT_SANITIZERS=ON -DBUILD_LTO_LIBS=ON -DLDC_INSTALL_LTOPLUGIN=ON -DLDC_INSTALL_LLVM_RUNTIME_LIBS=ON"
  Ubuntu-19.10-multilib-sharedLibsOnly-gdmd:
    <<: *commonSteps
    docker:
      # ubuntu:20.04 apparently fails for clock_getres() (works for Cirrus CI), host kernel possibly too old
      - image: ubuntu:19.10
    environment:
      - PARALLELISM: 2
      - CI_OS: linux
      - LIBCLANG_COMMON_VERSION: "9"
      - EXTRA_APT_PACKAGES: gdmd
      - HOST_LDC_VERSION: 1.20.1
      - EXTRA_CMAKE_FLAGS: "-DMULTILIB=ON -DBUILD_SHARED_LIBS=ON -DBUILD_LTO_LIBS=ON -DLDC_INSTALL_LTOPLUGIN=ON -DLDC_INSTALL_LLVM_RUNTIME_LIBS=ON -DD_COMPILER=gdmd"
  macOS-x64:
    <<: *commonSteps
    macos:
      xcode: "11.4.0"
    environment:
      - PARALLELISM: 4
      - CI_OS: osx
      - LLVM_VERSION: 10.0.0
      - HOST_LDC_VERSION: 1.20.1
      - EXTRA_CMAKE_FLAGS: "-DBUILD_LTO_LIBS=ON"
  macOS-x64-sharedLibsOnly:
    <<: *commonSteps
    macos:
      xcode: "11.4.0"
    environment:
      - PARALLELISM: 4
      - CI_OS: osx
      - LLVM_VERSION: 10.0.0
      - HOST_LDC_VERSION: 1.20.1
      - EXTRA_CMAKE_FLAGS: "-DBUILD_SHARED_LIBS=ON -DBUILD_LTO_LIBS=ON"

workflows:
  version: 2
  build:
    jobs:
      - Ubuntu-18.04-multilib-rtSanitizers
      - Ubuntu-19.10-multilib-sharedLibsOnly-gdmd
      - macOS-x64
      - macOS-x64-sharedLibsOnly
