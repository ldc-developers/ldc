# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions

name: Main
on:
  pull_request:
  push:
    branches-ignore:
      - 'merge-*' # don't run on pushes to merge-X.Y.Z branches, they are usually PRs
    tags: # explicitly needed to run for all tags, due to the branches filter above
      - '**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  LLVM_VERSION: 19.1.7

jobs:
  build-native:
    strategy:
      fail-fast: false
      matrix:
        include:

          - job_name: macOS x86_64_1
            os: macos-13
            arch: x86_64
            # https://github.com/ldc-developers/ldc/issues/4462:
            # When using LTO, we need to explicitly export ~all symbols for plugin support via `ld64 -exported_symbol '__*'`.
            # Additionally `-w` to suppress resulting linker warnings.
            extra_cmake_flags: >-
              -DD_COMPILER_FLAGS="-O -flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto -L-exported_symbol '-L__*' -L-w"
              -DEXTRA_CXXFLAGS=-flto=full
            with_pgo: true
          - job_name: macOS x86_64_2
            os: macos-13
            arch: x86_64
            extra_cmake_flags: >-
              -DD_COMPILER_FLAGS="-O -flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto -L-exported_symbol '-L__*' -L-w"
              -DEXTRA_CXXFLAGS=-flto=full
            with_pgo: true
          - job_name: macOS x86_64_3
            os: macos-13
            arch: x86_64
            extra_cmake_flags: >-
              -DD_COMPILER_FLAGS="-O -flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto -L-exported_symbol '-L__*' -L-w"
              -DEXTRA_CXXFLAGS=-flto=full
            with_pgo: true
          - job_name: macOS x86_64_4
            os: macos-13
            arch: x86_64
            extra_cmake_flags: >-
              -DD_COMPILER_FLAGS="-O -flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto -L-exported_symbol '-L__*' -L-w"
              -DEXTRA_CXXFLAGS=-flto=full
            with_pgo: true
          - job_name: macOS x86_64_5
            os: macos-13
            arch: x86_64
            extra_cmake_flags: >-
              -DD_COMPILER_FLAGS="-O -flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto -L-exported_symbol '-L__*' -L-w"
              -DEXTRA_CXXFLAGS=-flto=full
            with_pgo: true

          - job_name: macOS arm64_1
            os: macos-14
            arch: arm64
            extra_cmake_flags: >-
              -DD_COMPILER_FLAGS="-O -flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto -L-exported_symbol '-L__*' -L-w"
            #  -DEXTRA_CXXFLAGS=-flto=full
            with_pgo: true
          - job_name: macOS arm64_2
            os: macos-14
            arch: arm64
            extra_cmake_flags: >-
              -DD_COMPILER_FLAGS="-O -flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto -L-exported_symbol '-L__*' -L-w"
            with_pgo: true
          - job_name: macOS arm64_3
            os: macos-14
            arch: arm64
            extra_cmake_flags: >-
              -DD_COMPILER_FLAGS="-O -flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto -L-exported_symbol '-L__*' -L-w"
            with_pgo: true
          - job_name: macOS arm64_4
            os: macos-14
            arch: arm64
            extra_cmake_flags: >-
              -DD_COMPILER_FLAGS="-O -flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto -L-exported_symbol '-L__*' -L-w"
            with_pgo: true
          - job_name: macOS arm64_5
            os: macos-14
            arch: arm64
            extra_cmake_flags: >-
              -DD_COMPILER_FLAGS="-O -flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto -L-exported_symbol '-L__*' -L-w"
            with_pgo: true

    name: ${{ matrix.job_name }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container_image }}
    timeout-minutes: 90
    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.arch == 'arm64' && '11.0' || '10.12' }}
    steps:
      - name: 'Set up Linux container'
        if: matrix.container_image
        run: |
          set -eux
          if type -P apt-get &>/dev/null; then
            # Ubuntu: pre-install git and sudo
            apt-get -q update
            DEBIAN_FRONTEND=noninteractive apt-get -yq install git-core sudo
          else
            # set up Alpine container
            apk add \
              git cmake ninja-is-really-ninja g++ clang ldc lld llvm-dev llvm-static compiler-rt \
              libxml2-static zstd-static zlib-static \
              bash grep diffutils make curl 7zip perl
            # create missing 7za symlink
            ln -s 7z /usr/bin/7za
            # make lld the default linker (note: /usr/bin/ld seems unused)
            ln -sf /usr/bin/ld.lld /usr/x86_64-alpine-linux-musl/bin/ld
            # create ../llvm symlink to distro LLVM (no prebuilt LDC-LLVM for musl)
            ln -s /usr/lib/llvm19 $(dirname $(pwd))/llvm
            ../llvm/bin/llvm-config --version
          fi
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 50
      - name: Install prerequisites
        if: |
          !startsWith(matrix.container_image, 'alpine')
        uses: ./.github/actions/1-setup
        with:
          llvm_version: ${{ matrix.llvm_version || env.LLVM_VERSION }}
          arch: ${{ matrix.arch }}
      - name: 'Ubuntu 22: Build recent gdb from source' # see https://github.com/ldc-developers/ldc/issues/4389
        if: startsWith(matrix.os, 'ubuntu-22.04')
        uses: ./.github/actions/helper-build-gdb
        with:
          arch: ${{ matrix.arch }}
      - name: 'macOS arm64: Switch to Xcode 16'
        if: runner.os == 'macOS' && matrix.arch == 'arm64'
        run: sudo xcode-select -switch /Applications/Xcode_16.1.app
      - name: Build bootstrap LDC
        uses: ./.github/actions/2-build-bootstrap
        with:
          cmake_flags: -DBUILD_LTO_LIBS=ON ${{ matrix.base_cmake_flags }}
          arch: ${{ matrix.arch }}
      - name: Build LDC with PGO instrumentation & gather profile from compiling default libs
        if: matrix.with_pgo
        uses: ./.github/actions/2a-build-pgo
        with:
          cmake_flags: ${{ matrix.base_cmake_flags }}
          arch: ${{ matrix.arch }}
      - name: Build LDC & LDC D unittests & defaultlib unittest runners
        uses: ./.github/actions/3-build-native
        with:
          cmake_flags: -DBUILD_LTO_LIBS=ON ${{ matrix.base_cmake_flags }} ${{ matrix.extra_cmake_flags }}
          arch: ${{ matrix.arch }}
          with_pgo: ${{ matrix.with_pgo }}

      - name: Run LDC D unittests
        if: success() || failure()
        uses: ./.github/actions/4a-test-ldc2
      - name: Run LIT testsuite
        if: success() || failure()
        uses: ./.github/actions/4b-test-lit
        with:
          arch: ${{ matrix.arch }}
      - name: Run DMD testsuite
        if: success() || failure()
        uses: ./.github/actions/4c-test-dmd
        with:
          arch: ${{ matrix.arch }}
      - name: Run defaultlib unittests & druntime integration tests
        if: success() || failure()
        uses: ./.github/actions/4d-test-libs
        with:
          arch: ${{ matrix.arch }}

      - name: Install LDC & make portable
        uses: ./.github/actions/5-install
        with:
          arch: ${{ matrix.arch }}
      - name: 'macOS: Cross-compile iOS libraries, copy to install dir & extend ldc2.conf'
        if: runner.os == 'macOS'
        uses: ./.github/actions/5a-ios
        with:
          arch: ${{ matrix.arch }}

      - name: Run a few integration tests against the installed compiler
        uses: ./.github/actions/6-integration-test
        with:
          arch: ${{ matrix.arch }}
      - name: 'macOS: Run iOS cross-compilation integration test'
        if: runner.os == 'macOS'
        run: |
          set -eux
          cd ..
          triple='${{ matrix.arch }}-apple-ios12.0${{ matrix.arch == 'x86_64' && '-simulator' || '' }}'
          installed/bin/ldc2 -mtriple="$triple" hello.d -of=hello_ios
          installed/bin/ldc2 -mtriple="$triple" hello.d -of=hello_ios_shared -link-defaultlib-shared

      - name: Create package & upload artifact(s)
        uses: ./.github/actions/7-package
        with:
          arch: ${{ matrix.arch }}
          os: ${{ startsWith(matrix.container_image, 'alpine') && 'alpine' || '' }}
