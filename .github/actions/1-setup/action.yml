name: Install prerequisites
inputs:
  llvm_version:
    required: true
  arch:
    required: true
runs:
  using: composite
  steps:

    - name: 'Linux: Install required apt packages'
      if: runner.os == 'Linux'
      shell: bash
      run: |
        set -eux
        cd ..
        export DEBIAN_FRONTEND=noninteractive
        arch='${{ inputs.arch }}'
        if [[ $arch == x86_64 ]]; then
          sudo dpkg --add-architecture i386
        fi
        sudo apt-get -q update

        packages=( \
          git-core cmake g++ \
          libcurl4 libzstd-dev \
          curl gdb p7zip-full tzdata unzip zip python3-pip \
        )
        if [[ $arch == x86_64 ]]; then
          packages+=(g++-multilib libcurl4:i386)
        fi
        # extra prerequisites of apt.llvm.org install script
        packages+=(lsb-release wget software-properties-common gnupg)

        sudo -E apt-get -yq install ${packages[@]}

        # Make sure to link libzstd statically
        sudo rm /usr/lib/$arch-linux-gnu/libzstd.so

    - name: 'Linux: Install clang 20 from apt.llvm.org'
      if: runner.os == 'Linux'
      shell: bash
      run: |
        set -eux
        cd ..
        curl -fL --retry 3 --max-time 30 -O https://apt.llvm.org/llvm.sh
        sudo bash llvm.sh 20
        for tool in clang clang++ ld.lld; do
          sudo ln -sf $tool-20 /usr/bin/$tool
          $tool --version
        done
    - name: 'macOS arm64: Install Homebrew clang 20' # see mimalloc comment in ../3-build-native/action.yml
      if: runner.os == 'macOS' && inputs.arch == 'arm64'
      shell: bash
      run: brew install llvm@20
    - name: 'Windows: Install clang v20.1.3 from GitHub'
      if: runner.os == 'Windows'
      shell: bash
      run: |
        set -eux
        cd ..
        curl -fL --retry 3 --max-time 300 -o clang.exe \
          https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.3/LLVM-20.1.3-win64.exe
        ./clang.exe //S # double-slash for bash
        rm clang.exe
        # C:\Program Files\LLVM\bin should already be in PATH
        clang-cl --version

    - name: Download & extract LDC-flavoured LLVM # into ../llvm
      shell: bash
      run: |
        set -eux
        cd ..

        version='${{ inputs.llvm_version }}'

        if [[ "$version" = *.* ]]; then
          tag="ldc-v$version"
        else
          tag=CI
        fi

        arch='${{ inputs.arch }}'

        # use assertions for untagged builds
        assertsSuffix="-withAsserts"
        if [[ '${{ github.ref }}' = refs/tags/* ]]; then
          assertsSuffix=""
        fi

        if [[ '${{ runner.os }}' == Windows ]]; then
          curl -fL --retry 3 --max-time 300 -o llvm.7z \
            https://github.com/ldc-developers/llvm-project/releases/download/$tag/llvm-$version-windows-$arch$assertsSuffix.7z
          mkdir llvm
          cd llvm
          7z x ../llvm.7z >/dev/null
          rm ../llvm.7z
          cd ..
        else
          if [[ '${{ runner.os }}' == Linux ]]; then
            os=linux
          elif [[ '${{ runner.os }}' == macOS ]]; then
            os=osx
          fi
          curl -fL --retry 3 --max-time 300 -o llvm.tar.xz \
            https://github.com/ldc-developers/llvm-project/releases/download/$tag/llvm-$version-$os-$arch$assertsSuffix.tar.xz
          mkdir llvm
          tar -xf llvm.tar.xz --strip 1 -C llvm
          rm llvm.tar.xz
        fi

        llvm/bin/llvm-config --version

    - name: 'Linux: Make lld (from apt.llvm.org) the default linker'
      if: runner.os == 'Linux'
      shell: bash
      run: |
        set -eux
        sudo ln -sf ld.lld /usr/bin/ld
        ld --version

    - name: Install D host compiler
      uses: dlang-community/setup-dlang@v1
      with:
        compiler: ldc-latest
    - name: 'Posix: Clear LD_LIBRARY_PATH env variable' # don't use host druntime/Phobos .so/.dylib etc.
      if: runner.os != 'Windows'
      shell: bash
      run: echo "LD_LIBRARY_PATH=" >> $GITHUB_ENV

    - name: Install lit
      shell: bash
      run: |
        set -euxo pipefail
        python3 --version
        if [[ '${{ runner.os }}-${{ inputs.arch }}' == 'macOS-arm64' ]]; then
          brew install lit
        else
          python3 -m pip install --user lit psutil
        fi
        python3 -c "import lit.main; lit.main.main();" --version . | head -n 1

    # the druntime tests require GNU make
    - name: 'Windows: Make sure GNU make is installed'
      if: runner.os == 'Windows'
      shell: cmd
      run: make --version
    - name: 'macOS: Install a more recent GNU make'
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install make
        gmake --version

    - name: 'Windows: Download & extract libcurl' # into ../libcurl/ldc2
      if: runner.os == 'Windows'
      shell: bash
      run: |
        set -eux
        cd ..

        url='https://curl.se/windows/latest.cgi?p=win64-mingw.zip'
        if [[ '${{ inputs.arch }}' == x86 ]]; then
          # this is the latest *official* 32-bit build
          url='https://curl.se/windows/dl-8.15.0_5/curl-8.15.0_5-win32-mingw.zip'
        fi

        curl -fL --retry 3 --max-time 60 -o libcurl.zip "$url"
        mkdir libcurl
        cd libcurl
        7z x ../libcurl.zip >/dev/null
        rm ../libcurl.zip
        mkdir ldc2
        cp curl-*/bin/{libcurl*.dll,curl-ca-bundle.crt} ldc2/
        if [[ '${{ inputs.arch }}' != x86 ]]; then
          mv ldc2/libcurl*.dll ldc2/libcurl.dll
        fi
        ls -lh ldc2/

    - name: 'Windows: Set LDC_VSDIR env variable' # to somewhat speed-up MSVC auto-detection
      if: runner.os == 'Windows'
      shell: bash
      run: echo "LDC_VSDIR=$(vswhere -latest -property installationPath)" >> $GITHUB_ENV

    - name: 'Windows x86: Make CMake configure 64-bit clang-cl for 32-bit code emission'
      if: runner.os == 'Windows' && inputs.arch == 'x86'
      shell: bash
      run: |
        set -eux
        echo "CFLAGS=-m32" >> $GITHUB_ENV
        echo "CXXFLAGS=-m32" >> $GITHUB_ENV
        echo "ASMFLAGS=-m32" >> $GITHUB_ENV
