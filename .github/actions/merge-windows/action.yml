name: Merge x64 & x86 packages to multilib one & build installer
runs:
  using: composite
  steps:

    - name: Download x64 and x86 artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: windows-*
        path: artifacts/
        merge-multiple: true # place all files into artifacts/ directly

    - name: Extract & merge artifacts
      shell: bash
      run: |
        set -eux
        7z x artifacts/ldc2-*-x64.7z >/dev/null
        7z x artifacts/ldc2-*-x86.7z >/dev/null
        mv ldc2-*-x86 ldc2-x86
        mv ldc2-*-x64 ldc2-multilib
        cd ldc2-multilib
        mv lib lib64
        cp -R ../ldc2-x86/lib lib32
        cp ../ldc2-x86/bin/{*.dll,*.pdb,curl-ca-bundle.crt} lib32/
    - name: Merge ldc2.conf
      shell: pwsh
      run: |
        cd ldc2-multilib
        (cat etc\ldc2.conf).replace('%%ldcbinarypath%%/../lib', '%%ldcbinarypath%%/../lib64') | Set-Content etc\ldc2.conf
        $conf32 = cat ..\ldc2-x86\etc\ldc2.conf -Raw
        $conf32 = "`r`n""i[3-6]86-.*-windows-msvc"":" + $conf32.Substring($conf32.IndexOf("`r`ndefault:") + 10)
        $conf32 = $conf32.Substring(0, $conf32.IndexOf("`r`n};`r`n") + 6)
        $conf32 = $conf32.Replace('%%ldcbinarypath%%/../lib', '%%ldcbinarypath%%/../lib32')
        Add-Content etc\ldc2.conf $conf32 -NoNewline
        cat etc\ldc2.conf

    - name: Generate hello.d
      shell: bash
      run: |
        set -eux
        cat >hello.d <<EOF
        void main() {
          import std.process, std.stdio;
          writefln("Hello world, %d bits", size_t.sizeof * 8);
          assert(!environment.get("VSINSTALLDIR"));
        }
        EOF
    - name: Run 32/64-bit hello-world smoke tests
      shell: cmd
      run: |
        echo on
        @echo Run 32/64-bit hello-world smoke test with internal toolchain
        ldc2-multilib\bin\ldc2 -v -mscrtlib=vcruntime140 -run hello.d || exit /b
        ldc2-multilib\bin\ldc2 -v -mscrtlib=vcruntime140 -m32 -run hello.d || exit /b

        @echo Run 32/64-bit hello-world smoke test with MSVC auto-detection
        ldc2-multilib\bin\ldc2 -v -run hello.d || exit /b
        ldc2-multilib\bin\ldc2 -v -m32 -run hello.d || exit /b

        @echo Run 32/64-bit hello-world smoke test with shared libs
        set PATH=%CD%\ldc2-multilib\bin;%PATH%
        ldc2-multilib\bin\ldc2 -link-defaultlib-shared -run hello.d || exit /b
        set PATH=%CD%\ldc2-multilib\lib32;%PATH%
        ldc2-multilib\bin\ldc2 -link-defaultlib-shared -m32 -run hello.d || exit /b

    # preliminary arm64 cross-compilation support
    - name: Install ninja v1.12.1
      uses: Ahajha/gha-setup-ninja@69595b0cf872acdad8ce599142fbdc88724b9a2b
    - name: Set VSDIR env variable
      shell: bash
      run: echo "VSDIR=$(vswhere -latest -property installationPath)" >> $GITHUB_ENV
    - name: Cross-compile arm64 libraries
      shell: cmd
      run: |
        echo on
        call "%VSDIR%\Common7\Tools\VsDevCmd.bat" -arch=arm64 -host_arch=x64 || exit /b
        echo on
        ldc2-multilib\bin\ldc-build-runtime --ninja ^
          --buildDir=build-libs-arm64 ^
          --dFlags=-mtriple=aarch64-windows-msvc ^
          "--ldcSrcDir=%CD%" ^
          BUILD_LTO_LIBS=ON
    - name: Copy arm64 libraries
      shell: bash
      run: |
        set -eux
        cp -R build-libs-arm64/lib ldc2-multilib/libarm64
        rm ldc2-multilib/libarm64/*.{exp,ilk}
        rm ldc2-multilib/libarm64/{druntime,phobos2}-ldc-shared.pdb
    - name: Add arm64 section to ldc2.conf
      shell: pwsh
      run: |
        cd ldc2-multilib
        $conf64 = cat etc\ldc2.conf -Raw
        $conf64 = "`r`n""(aarch|arm)64-.*-windows-msvc"":" + $conf64.Substring($conf64.IndexOf("`r`ndefault:") + 10)
        $conf64 = $conf64.Substring(0, $conf64.IndexOf("`r`n};`r`n") + 6)
        $conf64 = $conf64.Replace('%%ldcbinarypath%%/../lib64', '%%ldcbinarypath%%/../libarm64')
        Add-Content etc\ldc2.conf $conf64 -NoNewline
        cat etc\ldc2.conf
    - name: Run arm64 hello-world cross-compilation smoke tests
      shell: cmd
      run: |
        echo on
        call "%VSDIR%\Common7\Tools\VsDevCmd.bat" -arch=arm64 -host_arch=x64 || exit /b
        echo on
        ldc2-multilib\bin\ldc2 -mtriple=aarch64-windows-msvc hello.d || exit /b
        ldc2-multilib\bin\ldc2 -mtriple=aarch64-windows-msvc -link-defaultlib-shared hello.d || exit /b
    - name: Add arm64 libcurl
      shell: bash
      run: |
        set -eux
        url='https://curl.se/windows/latest.cgi?p=win64a-mingw.zip'
        curl -fL --retry 3 --max-time 60 -o libcurl.zip "$url"
        7z x libcurl.zip >/dev/null
        rm libcurl.zip
        cp curl-*/bin/{libcurl*.dll,curl-ca-bundle.crt} ldc2-multilib/libarm64/
        rm -rf curl-*
        mv ldc2-multilib/libarm64/libcurl*.dll ldc2-multilib/libarm64/libcurl.dll

    - name: Pack multilib package
      shell: bash
      run: |
        set -eux
        mkdir newArtifacts

        if [[ '${{ github.ref }}' = refs/tags/v* ]]; then
          artifactID='${{ github.ref }}'
          artifactID="${artifactID:11}"
        else
          artifactID='${{ github.sha }}'
          artifactID="${artifactID:0:8}"
        fi

        artifactName="ldc2-$artifactID-windows-multilib"
        cp -R ldc2-multilib $artifactName # copy, not move - sporadic 'permission denied' errorsâ€¦
        7z a -mx=9 newArtifacts/$artifactName.7z $artifactName >/dev/null

        # export ARTIFACT_{ID,NAME}
        echo "ARTIFACT_ID=$artifactID" >> $GITHUB_ENV
        echo "ARTIFACT_NAME=$artifactName" >> $GITHUB_ENV

    - name: Build installer
      shell: cmd
      run: |
        echo on
        "C:\Program Files (x86)\Inno Setup 6\iscc" ^
          "/O%CD%\newArtifacts" ^
          "/DLDCVersion=%ARTIFACT_ID%" ^
          "/DLDCDir=%CD%\%ARTIFACT_NAME%" ^
          packaging\windows_installer.iss

    - name: Upload multilib package & installer
      uses: actions/upload-artifact@v4
      with:
        name: windows-multilib
        path: newArtifacts/
        compression-level: 0
