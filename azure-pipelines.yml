variables:
  LLVM_VERSION: 10.0.0
  CLANG_VERSION: 9.0.0
  HOST_LDC_VERSION: 1.22.0

trigger:
- '*'
- refs/tags/v*

jobs:
- job: Windows
  timeoutInMinutes: 120
  pool:
    vmImage: 'windows-2019'
  variables:
    VSINSTALLDIR: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\
  strategy:
    matrix:
      x64:
        OS: windows
        MODEL: 64
        ARCH: x64
        EXTRA_CMAKE_FLAGS: -DBUILD_LTO_LIBS=ON -DD_COMPILER_FLAGS="-flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto" -DEXTRA_CXXFLAGS=-flto=full
      x86:
        OS: windows
        MODEL: 32
        ARCH: x86
        # Undefined symbol errors with FullLTO; ThinLTO works.
        EXTRA_CMAKE_FLAGS: -DBUILD_LTO_LIBS=ON -DD_COMPILER_FLAGS="-flto=thin -defaultlib=phobos2-ldc-lto,druntime-ldc-lto" -DEXTRA_CXXFLAGS=-flto=thin
        # Let CMake configure 64-bit clang-cl for 32-bit code emission.
        CFLAGS: -m32
        CXXFLAGS: -m32
        ASMFLAGS: -m32
  steps:
    - template: .azure-pipelines/windows.yml

# Merges the x64 and x86 Windows packages to a multilib package (64-bit binaries + 32/64-bit libraries).
- job: Windows_multilib
  timeoutInMinutes: 30
  pool:
    vmImage: 'windows-2019'
  dependsOn:
    - Windows
  steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: windows-x64
        targetPath: artifacts
      displayName: Download x64 artifact
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: windows-x86
        targetPath: artifacts
      displayName: Download x86 artifact
    - script: |
        if "%BUILD_SOURCEBRANCH:~0,10%" == "refs/tags/" (
          set ARTIFACT_ID=%BUILD_SOURCEBRANCH:~11%
        ) else (
          set ARTIFACT_ID=%BUILD_SOURCEVERSION:~0,8%
        )
        set ARTIFACT_NAME=ldc2-%ARTIFACT_ID%-windows-multilib
        :: Persist the ARTIFACT_NAME env variable for future steps
        echo ##vso[task.setvariable variable=ARTIFACT_NAME]%ARTIFACT_NAME%
        7z x artifacts/ldc2-*-x64.7z > nul
        7z x artifacts/ldc2-*-x86.7z > nul
        mv ldc2-*-x64 %ARTIFACT_NAME%
        cd %ARTIFACT_NAME%
        mv lib lib64
        cp -r ../ldc2-*-x86/lib .
        mv lib lib32
      displayName: Extract & merge artifacts
    - powershell: |
        cd ldc2-*-multilib
        (cat etc\ldc2.conf).replace('%%ldcbinarypath%%/../lib', '%%ldcbinarypath%%/../lib64') | Set-Content etc\ldc2.conf
        $conf32 = cat ..\ldc2-*-x86\etc\ldc2.conf -Raw
        $conf32 = "`r`n""i[3-6]86-.*-windows-msvc"":" + $conf32.Substring($conf32.IndexOf("`r`ndefault:") + 10)
        $conf32 = $conf32.Substring(0, $conf32.IndexOf("`r`n};`r`n") + 6)
        $conf32 = $conf32.Replace('%%ldcbinarypath%%/../lib', '%%ldcbinarypath%%/../lib32')
        Add-Content etc\ldc2.conf $conf32
        cat etc\ldc2.conf
      displayName: Merge ldc2.conf
    - powershell: |
        $hello  = "void main() {`n"
        $hello += "  import std.process, std.stdio;`n"
        $hello += "  writefln(""Hello world, %d bits"", size_t.sizeof * 8);`n"
        $hello += "  assert(!environment.get(""VSINSTALLDIR""));`n"
        $hello += "}`n"
        echo "$hello" > hello.d
      displayName: Generate hello.d
    - script: |
        echo on
        %ARTIFACT_NAME%\bin\ldc2 -v -mscrtlib=vcruntime140 -run hello.d || exit /b
        %ARTIFACT_NAME%\bin\ldc2 -v -mscrtlib=vcruntime140 -m32 -run hello.d
      displayName: Run 32/64-bit hello-world smoke test with internal toolchain
    - script: |
        echo on
        %ARTIFACT_NAME%\bin\ldc2 -v -run hello.d || exit /b
        %ARTIFACT_NAME%\bin\ldc2 -v -m32 -run hello.d
      displayName: Run 32/64-bit hello-world smoke test with MSVC auto-detection
    - script: |
        mkdir newArtifacts
        7z a -mx=9 newArtifacts/%ARTIFACT_NAME%.7z %ARTIFACT_NAME% > nul
      displayName: Pack
    - publish: newArtifacts
      artifact: windows-multilib

- job: Linux_multilib
  timeoutInMinutes: 120
  pool:
    vmImage: 'ubuntu-16.04'
  variables:
    CI_OS: linux
    ARCH: x86_64
    # To improve portability of the generated binaries, link the C++ standard library statically.
    # Also don't use relax relocations for the C(++) parts of the default libraries in order to
    # support older user binutils (e.g., Ubuntu 14.04).
    BOOTSTRAP_CMAKE_FLAGS: -DBUILD_LTO_LIBS=ON -DLDC_INSTALL_LTOPLUGIN=ON
    EXTRA_CMAKE_FLAGS: -DMULTILIB=ON -DBUILD_LTO_LIBS=ON -DCMAKE_EXE_LINKER_FLAGS=-static-libstdc++ -DJITRT_EXTRA_LDFLAGS=-static-libstdc++ -DRT_CFLAGS=-Wa,-mrelax-relocations=no -DLDC_INSTALL_LTOPLUGIN=ON -DLDC_INSTALL_LLVM_RUNTIME_LIBS=ON -DD_COMPILER_FLAGS="-flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto" -DEXTRA_CXXFLAGS=-flto=full
  steps:
    - template: .azure-pipelines/posix.yml

- job: macOS_x64
  timeoutInMinutes: 120
  pool:
    vmImage: 'macOS-10.15'
  variables:
    CI_OS: osx
    ARCH: x86_64
    BOOTSTRAP_CMAKE_FLAGS: -DBUILD_LTO_LIBS=ON
    EXTRA_CMAKE_FLAGS: -DBUILD_LTO_LIBS=ON -DD_COMPILER_FLAGS="-flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto" -DEXTRA_CXXFLAGS=-flto=full
    MACOSX_DEPLOYMENT_TARGET: 10.9
    IOS_DEPLOYMENT_TARGET: 12.0
  steps:
    - template: .azure-pipelines/posix.yml

- job: Android
  timeoutInMinutes: 120
  pool:
    vmImage: 'ubuntu-16.04'
  variables:
    CI_OS: android
    ANDROID_NDK_VERSION: r21d
  strategy:
    matrix:
      armv7a:
        ARCH: armv7a
        EXTRA_CMAKE_FLAGS: -DANDROID_ABI=armeabi-v7a -DANDROID_NATIVE_API_LEVEL=21 -DANDROID_STL=c++_static -DCMAKE_CROSSCOMPILING=True
        ANDROID_X86_ABI: x86
      aarch64:
        ARCH: aarch64
        EXTRA_CMAKE_FLAGS: -DANDROID_ABI=arm64-v8a -DANDROID_NATIVE_API_LEVEL=21 -DANDROID_STL=c++_static -DCMAKE_CROSSCOMPILING=True
        ANDROID_X86_ABI: x86_64
  steps:
    - template: .azure-pipelines/posix.yml

# Uploads the packages to a GitHub release.
- job: Upload_to_GitHub
  timeoutInMinutes: 30
  pool:
    vmImage: 'ubuntu-16.04'
  dependsOn:
    - Windows_multilib
    - Linux_multilib
    - macOS_x64
    - Android
  # Only run for commits on the master branch and tags.
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/tags/')))
  steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        targetPath: artifacts
    - bash: |
        set -ex
        cd artifacts
        mv */*.* .
        find . -type d -empty -delete
        ls -l
        sha256sum * > sha256sums.txt
      displayName: Move artifact files out of their subdirs and compute hashes
    # We also need to determine whether the GitHub release is a pre-release,
    # as the GitHubRelease task overwrites that flag.
    - bash: |
        set -ex
        if [ "${BUILD_SOURCEBRANCH:0:10}" != "refs/tags/" ]; then
          releaseTag=CI
          isPreRelease=true
          artifactID=${BUILD_SOURCEVERSION:0:8}
        else
          releaseTag=${BUILD_SOURCEBRANCH:10}
          if [[ "$releaseTag" == *-* ]]; then
            isPreRelease=true
          else
            isPreRelease=false
          fi
          artifactID=${BUILD_SOURCEBRANCH:11}
        fi
        mv artifacts/sha256sums.txt artifacts/ldc2-$artifactID.sha256sums.txt
        set +x
        echo "##vso[task.setvariable variable=GITHUB_RELEASE_TAG]$releaseTag"
        echo "##vso[task.setvariable variable=GITHUB_RELEASE_ISPRERELEASE]$isPreRelease"
      displayName: Set GITHUB_RELEASE_{TAG,ISPRERELEASE} env variables
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: kinke
        repositoryName: ldc-developers/ldc
        action: edit
        tag: $(GITHUB_RELEASE_TAG)
        assets: artifacts/*
        assetUploadMode: replace
        # If we omit this, GitHub's isPreRelease flag is overwritten by the default `false`.
        isPreRelease: $(GITHUB_RELEASE_ISPRERELEASE)
        # If we omit this, an automatic change log is appended to the GitHub description.
        addChangeLog: false
      displayName: Upload artifacts to GitHub release
