# Each step starts in the checked-out source directory,
# environment variables aren't persisted across steps.

steps:

- checkout: self
  submodules: true
  fetchDepth: 50

# Prerequisites
- script: |
    set -ex
    cd ..
    if [ "$CI_OS" = "osx" ]; then
      # Download & extract Ninja
      curl -L -o ninja-mac.zip https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-mac.zip
      mkdir ninja
      tar -xf ninja-mac.zip -C ninja
    else
      export DEBIAN_FRONTEND=noninteractive
      sudo dpkg --add-architecture i386
      sudo apt-get -q update
      sudo apt-get -yq install \
        git-core cmake ninja-build g++-multilib \
        libcurl3 libcurl3:i386 \
        curl gdb p7zip-full tzdata unzip zip
      # Download & extract clang
      curl -L -o clang.tar.xz https://github.com/llvm/llvm-project/releases/download/llvmorg-$CLANG_VERSION/clang+llvm-$CLANG_VERSION-x86_64-linux-gnu-ubuntu-16.04.tar.xz
      mkdir clang
      tar -xf clang.tar.xz --strip 1 -C clang
      # Use ld.gold per default, so that LTO is tested
      sudo update-alternatives --install /usr/bin/ld ld /usr/bin/ld.gold 99
    fi
    # Install lit
    curl -OL https://bootstrap.pypa.io/get-pip.py
    python get-pip.py --user
    python -m pip install --user lit
    python -c "import lit; lit.main();" --version . | head -n 1
    # Download & extract host LDC
    HOST_OS="$CI_OS"
    if [ "$CI_OS" = "android" ]; then HOST_OS="linux"; fi
    curl -L -o ldc2.tar.xz https://github.com/ldc-developers/ldc/releases/download/v$HOST_LDC_VERSION/ldc2-$HOST_LDC_VERSION-$HOST_OS-x86_64.tar.xz
    mkdir host-ldc
    tar -xf ldc2.tar.xz --strip 1 -C host-ldc
    # Download & extract LDC-flavoured LLVM
    assertsSuffix=""
    if [ "${BUILD_SOURCEBRANCH:0:10}" != "refs/tags/" ]; then
      assertsSuffix="-withAsserts"
    fi
    curl -L -o llvm.tar.xz https://github.com/ldc-developers/llvm-project/releases/download/ldc-v$LLVM_VERSION/llvm-$LLVM_VERSION-$HOST_OS-x86_64$assertsSuffix.tar.xz
    mkdir llvm
    tar -xf llvm.tar.xz --strip 1 -C llvm
    # Set PARALLEL_JOBS env variable and persist it for future steps
    if [ "$CI_OS" = "osx" ]; then
      PARALLEL_JOBS=$(sysctl -n hw.logicalcpu)
    else
      PARALLEL_JOBS=$(nproc)
    fi
    set +x
    echo "##vso[task.setvariable variable=PARALLEL_JOBS]$PARALLEL_JOBS"
  displayName: Install prerequisites

# Build bootstrap LDC
- script: |
    set -ex
    cd ..
    export PATH="$PWD/ninja:$PATH" # for macOS
    cmake --version
    ninja --version
    mkdir bootstrap-ldc
    cd bootstrap-ldc
    cmake -G Ninja $BUILD_SOURCESDIRECTORY \
      -DCMAKE_BUILD_TYPE=Release \
      -DLLVM_ROOT_DIR=$PWD/../llvm \
      -DD_COMPILER=$PWD/../host-ldc/bin/ldmd2 \
      -DBUILD_SHARED_LIBS=OFF \
      $BOOTSTRAP_CMAKE_FLAGS
    ninja -j$PARALLEL_JOBS
    bin/ldc2 -version
  displayName: Build bootstrap LDC

# Build
- script: |
    set -ex
    cd ..
    export PATH="$PWD/ninja:$PATH" # for macOS
    # Linux: use clang instead of gcc, for LTO
    if [ "$CI_OS" = "linux" ]; then
      export CC=$PWD/clang/bin/clang
      export CXX=$PWD/clang/bin/clang++
    fi
    installDir=$PWD/install
    mkdir build
    cd build
    IFS=$'\n' extraFlags=( $(xargs -n1 <<<"$EXTRA_CMAKE_FLAGS") )
    cmake -G Ninja $BUILD_SOURCESDIRECTORY \
      -DCMAKE_BUILD_TYPE=Release \
      -DLLVM_ROOT_DIR=$PWD/../llvm \
      -DD_COMPILER=$PWD/../bootstrap-ldc/bin/ldmd2 \
      -DCMAKE_INSTALL_PREFIX=$installDir \
      -DINCLUDE_INSTALL_DIR=$installDir/import \
      "${extraFlags[@]}"
    ninja -j$PARALLEL_JOBS all ldc2-unittest all-test-runners
    bin/ldc2 -version
  displayName: Build LDC & LDC D unittests & defaultlib unittest runners
  condition: and(succeeded(), ne(variables['CI_OS'], 'android'))

# Android only: cross-compile LDC
- script: |
    set -ex
    cd ..
    # Download & extract LDC-flavoured LLVM for Android target
    curl -L -o llvm-$ARCH.tar.xz https://github.com/ldc-developers/llvm-project/releases/download/ldc-v$LLVM_VERSION/llvm-$LLVM_VERSION-$CI_OS-$ARCH.tar.xz
    mkdir llvm-$ARCH
    tar -xf llvm-$ARCH.tar.xz --strip 1 -C llvm-$ARCH
    # Download & extract Android NDK
    curl -OL https://dl.google.com/android/repository/android-ndk-$ANDROID_NDK_VERSION-linux-x86_64.zip
    unzip android-ndk-$ANDROID_NDK_VERSION-linux-x86_64.zip > /dev/null
    rm android-ndk-$ANDROID_NDK_VERSION-linux-x86_64.zip
    # The NDK toolchain file enforces `-g` as base C[XX] flag - remove it to
    # *significantly* reduce executable sizes
    TOOLCHAIN_FILE=$PWD/android-ndk-$ANDROID_NDK_VERSION/build/cmake/android.toolchain.cmake
    sed -i 's|^  -g$||' $TOOLCHAIN_FILE
    # Set EXTRA_CMAKE_FLAGS_ANDROID for future steps
    set +x
    echo "##vso[task.setvariable variable=EXTRA_CMAKE_FLAGS_ANDROID]-DCMAKE_TOOLCHAIN_FILE=$TOOLCHAIN_FILE"
    set -x
    # Add a llvm-config bash script (cannot run ARM executable)
    androidEnv="android"
    if [ "$ARCH" = "armv7a" ]; then androidEnv="androideabi"; fi
    LLVM_TRIPLE=$ARCH--linux-$androidEnv
    sed $BUILD_SOURCESDIRECTORY/.azure-pipelines/android-llvm-config.in \
      -e "s|@LLVM_VERSION@|$LLVM_VERSION|g" \
      -e "s|@LLVM_INSTALL_DIR@|$PWD/llvm-$ARCH|g" \
      -e "s|@LLVM_DEFAULT_TARGET_TRIPLE@|$LLVM_TRIPLE|g" \
      -e "s|@LLVM_TARGETS@|AArch64 ARM X86 WebAssembly|g" > llvm-$ARCH/bin/llvm-config
    chmod 755 llvm-$ARCH/bin/llvm-config
    # Set up DFLAGS for cross-compiling/linking with host ldmd2
    DFLAGS="-mtriple=$LLVM_TRIPLE -L-L$PWD/ldc-build-runtime.tmp/lib -gcc=$PWD/android-ndk-$ANDROID_NDK_VERSION/toolchains/llvm/prebuilt/linux-x86_64/bin/$ARCH-linux-${androidEnv}21-clang"
    set +x
    echo "##vso[task.setvariable variable=DFLAGS]$DFLAGS"
  displayName: 'Android: Set up cross-compilation'
  condition: and(succeeded(), eq(variables['CI_OS'], 'android'))
- script: |
    set -ex
    cd ..
    IFS=$'\n' extraFlags=( $(xargs -n1 <<<"$EXTRA_CMAKE_FLAGS $EXTRA_CMAKE_FLAGS_ANDROID") )
    bootstrap-ldc/bin/ldc-build-runtime --ninja -j $PARALLEL_JOBS \
      --dFlags="-fvisibility=hidden;${DFLAGS// /;}" \
      --targetSystem='Android;Linux;UNIX' \
      --ldcSrcDir=$BUILD_SOURCESDIRECTORY \
      "${extraFlags[@]//-D/}"
  displayName: 'Android: Cross-compile default libraries'
  condition: and(succeeded(), eq(variables['CI_OS'], 'android'))
- script: |
    set -ex
    cd ..
    installDir=$PWD/install
    mkdir build-$ARCH
    cd build-$ARCH
    IFS=$'\n' extraFlags=( $(xargs -n1 <<<"$EXTRA_CMAKE_FLAGS $EXTRA_CMAKE_FLAGS_ANDROID") )
    cmake -G Ninja $BUILD_SOURCESDIRECTORY \
      -DCMAKE_BUILD_TYPE=Release \
      -DLLVM_ROOT_DIR=$PWD/../llvm-$ARCH \
      -DD_COMPILER=$PWD/../bootstrap-ldc/bin/ldmd2 \
      -DCMAKE_INSTALL_PREFIX=$installDir \
      -DINCLUDE_INSTALL_DIR=$installDir/import \
      -DD_LINKER_ARGS="-fuse-ld=bfd;-L$PWD/../ldc-build-runtime.tmp/lib;-lphobos2-ldc;-ldruntime-ldc" \
      "${extraFlags[@]}"
    ninja -j$PARALLEL_JOBS -v ldc2 ldmd2 ldc-build-runtime ldc-profdata ldc-prune-cache
  displayName: 'Android: Cross-compile LDC executables'
  condition: and(succeeded(), eq(variables['CI_OS'], 'android'))

# Pack source dir
- script: |
    set -ex
    cd ..
    mkdir artifacts
    if [ "${BUILD_SOURCEBRANCH:0:10}" = "refs/tags/" ]; then
      artifactID=${BUILD_SOURCEBRANCH:11}
    else
      artifactID=${BUILD_SOURCEVERSION:0:8}
    fi
    artifactName=ldc-$artifactID-src
    chmod -R go=rX $BUILD_SOURCESDIRECTORY
    GZIP=-9 tar -czf artifacts/$artifactName.tar.gz --exclude-vcs --owner=0 --group=0 --transform=s,${BUILD_SOURCESDIRECTORY:1},$artifactName, $BUILD_SOURCESDIRECTORY
    tar -xf artifacts/$artifactName.tar.gz
    zip -r -9 artifacts/$artifactName.zip $artifactName
  displayName: Pack source dir
  condition: and(succeeded(), eq(variables['CI_OS'], 'linux'))

# Tests
- script: |
    set -ex
    cd ../build
    ctest --output-on-failure -R "ldc2-unittest"
  displayName: Run LDC D unittests
  condition: and(succeededOrFailed(), ne(variables['CI_OS'], 'android'))
- script: |
    set -ex
    cd ../build
    # Temporarily add LLVM bin dir to PATH, so that e.g. wasm-ld is found
    PATH=$PWD/../llvm/bin:$PATH ctest -V -R "lit-tests"
  displayName: Run LIT testsuite
  condition: and(succeededOrFailed(), ne(variables['CI_OS'], 'android'))
- script: |
    set -ex
    cd ../build
    DMD_TESTSUITE_MAKE_ARGS=-j$PARALLEL_JOBS ctest -V -R "dmd-testsuite"
  displayName: Run DMD testsuite
  condition: and(succeededOrFailed(), ne(variables['CI_OS'], 'android'))
- script: |
    set -ex
    cd ../build
    ctest -j$PARALLEL_JOBS --output-on-failure -E "dmd-testsuite|lit-tests|ldc2-unittest"
  displayName: Run defaultlib unittests & druntime stand-alone tests
  condition: and(succeededOrFailed(), ne(variables['CI_OS'], 'android'))

# Install & make portable
- script: |
    set -ex
    cd ..
    if [ "$CI_OS" = "android" ]; then
      mkdir -p install/bin
      cp build-$ARCH/bin/{ldc2,ldmd2,ldc-build-runtime,ldc-profdata,ldc-prune-cache} install/bin
      mkdir install/lib
      cp ldc-build-runtime.tmp/lib/*.a install/lib
      mkdir install/etc
      sed "s|$PWD/install/|%%ldcbinarypath%%/../|g" build-$ARCH/bin/ldc2_install.conf > install/etc/ldc2.conf
      cp -r $BUILD_SOURCESDIRECTORY/packaging/bash_completion.d install/etc
      #
      mkdir install/import
      cp -r $BUILD_SOURCESDIRECTORY/runtime/druntime/src/{core,etc,ldc,object.d} install/import
      cp bootstrap-ldc/runtime/import/ldc/gccbuiltins_{aarch64,arm,x86}.di install/import/ldc
      cp -r $BUILD_SOURCESDIRECTORY/runtime/phobos/etc/c install/import/etc
      rm -rf install/import/etc/c/zlib
      cp -r $BUILD_SOURCESDIRECTORY/runtime/phobos/std install/import
    else
      export PATH="$PWD/ninja:$PATH"
      cd build
      ninja install > /dev/null
      cd ..
      perl -pi -e s?$PWD/install/?%%ldcbinarypath%%/../?g install/etc/ldc2.conf
    fi
    cp $BUILD_SOURCESDIRECTORY/{LICENSE,packaging/README} install
    cat install/etc/ldc2.conf
    # Now rename the installation dir to test portability
    mv install installed
  displayName: Install LDC & make portable

# Android: add x86 libraries
- script: |
    set -ex
    cd ..
    arch=$ANDROID_X86_ABI
    if [ "$arch" = "x86" ]; then arch="i686"; fi
    bootstrap-ldc/bin/ldc-build-runtime --ninja -j $PARALLEL_JOBS \
      --buildDir=build-libs-$arch \
      --dFlags="-fvisibility=hidden;-mtriple=$arch-linux-android" \
      --targetSystem='Android;Linux;UNIX' \
      --ldcSrcDir=$BUILD_SOURCESDIRECTORY \
      ${EXTRA_CMAKE_FLAGS//-D/} \
      ${EXTRA_CMAKE_FLAGS_ANDROID//-D/} \
      ANDROID_ABI=$ANDROID_X86_ABI
    mkdir installed/lib-$arch
    cp build-libs-$arch/lib/*.a installed/lib-$arch
  displayName: 'Android: Cross-compile x86 libraries and copy to install dir'
  condition: and(succeeded(), eq(variables['CI_OS'], 'android'))

# Mac: add iOS libraries (arm64 and x86_64)
- script: |
    set -ex
    cd ..
    export PATH="$PWD/ninja:$PATH"
    triple_arm64="arm64-apple-ios$IOS_DEPLOYMENT_TARGET"
    triple_x64="x86_64-apple-ios$IOS_DEPLOYMENT_TARGET"
    # TODO: build shared libs too, and look into `-fvisibility=hidden` requirement
    build/bin/ldc-build-runtime --ninja -j $PARALLEL_JOBS \
      --buildDir=build-libs-arm64 \
      --cFlags="-target;$triple_arm64" \
      --dFlags="-mtriple=$triple_arm64;-fvisibility=hidden" \
      --ldcSrcDir=$BUILD_SOURCESDIRECTORY \
      CMAKE_SYSTEM_NAME=iOS \
      CMAKE_OSX_ARCHITECTURES=arm64 \
      CMAKE_OSX_DEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET \
      BUILD_SHARED_LIBS=OFF \
      BUILD_LTO_LIBS=ON
    build/bin/ldc-build-runtime --ninja -j $PARALLEL_JOBS \
      --buildDir=build-libs-x86_64 \
      --cFlags="-target;$triple_x64" \
      --dFlags="-mtriple=$triple_x64;-fvisibility=hidden" \
      --ldcSrcDir=$BUILD_SOURCESDIRECTORY \
      CMAKE_SYSTEM_NAME=iOS \
      CMAKE_OSX_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk \
      CMAKE_OSX_ARCHITECTURES=x86_64 \
      CMAKE_OSX_DEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET \
      BUILD_SHARED_LIBS=OFF \
      BUILD_LTO_LIBS=ON
    mkdir installed/lib-ios-{arm64,x86_64}
    cp build-libs-arm64/lib/*.a installed/lib-ios-arm64
    cp build-libs-x86_64/lib/*.a installed/lib-ios-x86_64
    rm installed/lib-ios-{arm64,x86_64}/*-lto-debug.a
    sections="
    \"arm64-apple-ios\":
    {
        switches = [
            \"-defaultlib=phobos2-ldc,druntime-ldc\",
            \"-link-defaultlib-shared=false\",
            \"-fvisibility=hidden\",
            \"-Xcc=-target\",
            \"-Xcc=$triple_arm64\",
            \"-Xcc=-miphoneos-version-min=$IOS_DEPLOYMENT_TARGET\",
            \"-Xcc=-isysroot\",
            \"-Xcc=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk\",
        ];
        lib-dirs = [
            \"%%ldcbinarypath%%/../lib-ios-arm64\",
        ];
        rpath = \"%%ldcbinarypath%%/../lib-ios-arm64\";
    };
    
    \"x86_64-apple-ios\":
    {
        switches = [
            \"-defaultlib=phobos2-ldc,druntime-ldc\",
            \"-link-defaultlib-shared=false\",
            \"-fvisibility=hidden\",
            \"-Xcc=-target\",
            \"-Xcc=$triple_x64\",
            \"-Xcc=-miphoneos-version-min=$IOS_DEPLOYMENT_TARGET\",
            \"-Xcc=-isysroot\",
            \"-Xcc=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk\",
        ];
        lib-dirs = [
            \"%%ldcbinarypath%%/../lib-ios-x86_64\",
        ];
        rpath = \"%%ldcbinarypath%%/../lib-ios-x86_64\";
    };"
    echo "$sections" >> installed/etc/ldc2.conf
    cat installed/etc/ldc2.conf
  displayName: 'Mac: Cross-compile iOS libraries (arm64 and x86_64), copy to install dir and extend ldc2.conf'
  condition: and(succeeded(), eq(variables['CI_OS'], 'osx'))

# Integration tests
- script: |
    set -ex
    cd ..
    echo 'void main() { import std.stdio; writefln("Hello world, %d bits", size_t.sizeof * 8); }' > hello.d
    installed/bin/ldc2 hello.d -m64 -of=hello64 -link-defaultlib-shared
    ./hello64
    if [ "$CI_OS" = "linux" ]; then
      installed/bin/ldc2 hello.d -m32 -of=hello32 -link-defaultlib-shared
      ./hello32
    fi
  displayName: Run hello-world integration test with shared libs
  condition: and(succeeded(), ne(variables['CI_OS'], 'android'))
- script: |
    set -ex
    cd ..
    installed/bin/ldc2 -mtriple="arm64-apple-ios$IOS_DEPLOYMENT_TARGET" hello.d -of=hello_ios_arm64
    installed/bin/ldc2 -mtriple="x86_64-apple-ios$IOS_DEPLOYMENT_TARGET" hello.d -of=hello_ios_x86_64
  displayName: 'Mac: Cross-compile & -link hello-world for iOS'
  condition: and(succeeded(), eq(variables['CI_OS'], 'osx'))
- script: |
    set -ex
    cd ..
    installed/bin/ldc2 hello.d -of=hello_thin -flto=thin -defaultlib=phobos2-ldc-lto,druntime-ldc-lto
    ./hello_thin
    # FIXME: full LTO fails on macOS
    if [ "$CI_OS" = "linux" ]; then
      installed/bin/ldc2 hello.d -of=hello_full -flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto
      ./hello_full
    fi
  displayName: Run hello-world integration test with LTO
  condition: and(succeeded(), ne(variables['CI_OS'], 'android'))
- script: |
    set -ex
    cd ..
    installed/bin/ldc2 -enable-dynamic-compile -run $BUILD_SOURCESDIRECTORY/tests/dynamiccompile/array.d
  displayName: Run dynamic-compile integration test
  condition: and(succeeded(), ne(variables['CI_OS'], 'android'))

# Add dub & dlang tools
- script: |
    set -e
    cd ..
    if [ "$CI_OS" = "android" ]; then
      DMD=$PWD/bootstrap-ldc/bin/ldmd2
    else
      DMD=$PWD/installed/bin/ldmd2
    fi
    echo "##vso[task.setvariable variable=DMD]$DMD"
  displayName: Set DMD environment variable
- script: |
    set -ex
    cd ..
    git clone --recursive https://github.com/dlang/dub.git
    cd dub
    git checkout "$(cat $BUILD_SOURCESDIRECTORY/packaging/dub_version)"
    DFLAGS='' $DMD -run build.d -O -w $DFLAGS
    cp bin/dub ../installed/bin
    if [ "$CI_OS" != "android" ]; then ../installed/bin/dub --version; fi
  displayName: Build & copy dub
- script: |
    set -ex
    cd ..
    git clone --recursive https://github.com/dlang/tools.git dlang-tools
    cd dlang-tools
    mkdir bin
    $DMD -w -de -dip1000 rdmd.d -of=bin/rdmd
    $DMD -w -de -dip1000 ddemangle.d -of=bin/ddemangle
    $DMD -w -de -dip1000 DustMite/dustmite.d DustMite/splitter.d -of=bin/dustmite
    cp bin/{rdmd,ddemangle,dustmite} ../installed/bin
  displayName: Build & copy dlang tools

# Pack & publish artifact
- script: |
    set -ex
    cd ..
    if [ ! -d artifacts ]; then mkdir artifacts; fi
    if [ "${BUILD_SOURCEBRANCH:0:10}" = "refs/tags/" ]; then
      artifactID=${BUILD_SOURCEBRANCH:11}
    else
      artifactID=${BUILD_SOURCEVERSION:0:8}
    fi
    artifactName=ldc2-$artifactID-$CI_OS-$ARCH
    mv installed $artifactName
    chmod -R go=rX $artifactName
    if [ "$CI_OS" = "osx" ]; then
      sudo chown -R root:wheel $artifactName
      tar -cJf artifacts/$artifactName.tar.xz --options='compression-level=9' $artifactName
    else
      tar -cf - --owner=0 --group=0 $artifactName | 7za a artifacts/$artifactName.tar.xz -si -txz -mx9
    fi
  displayName: Pack installation dir
- publish: ../artifacts
  artifact: $(CI_OS)-$(ARCH)
