# Cross-compiles LDC and default libraries to an Android target.
#
# Required env vars:
# - ANDROID_NDK_VERSION
# - ARCH
# - CI_OS
# - EXTRA_CMAKE_FLAGS (optional)
# - EXTRA_CMAKE_FLAGS_CROSS (optional)
# - LLVM_VERSION
# - PARALLEL_JOBS
# Exported env vars:
# - DFLAGS
# - EXTRA_CMAKE_FLAGS_ANDROID

steps:

# Set up cross-compilation
- script: |
    set -ex
    cd ..
    # Download & extract LDC-flavoured LLVM for Android target
    curl --max-time 300 --retry 3 -L -o llvm-$ARCH.tar.xz https://github.com/ldc-developers/llvm-project/releases/download/ldc-v$LLVM_VERSION/llvm-$LLVM_VERSION-$CI_OS-$ARCH.tar.xz
    mkdir llvm-$ARCH
    tar -xf llvm-$ARCH.tar.xz --strip 1 -C llvm-$ARCH
    # Download & extract Android NDK
    curl --max-time 300 --retry 3 -OL https://dl.google.com/android/repository/android-ndk-$ANDROID_NDK_VERSION-linux-x86_64.zip
    unzip android-ndk-$ANDROID_NDK_VERSION-linux-x86_64.zip > /dev/null
    rm android-ndk-$ANDROID_NDK_VERSION-linux-x86_64.zip
    # The NDK toolchain file enforces `-g` as base C[XX] flag - remove it to
    # *significantly* reduce executable sizes
    TOOLCHAIN_FILE=$PWD/android-ndk-$ANDROID_NDK_VERSION/build/cmake/android.toolchain.cmake
    sed -i 's|^  -g$||' $TOOLCHAIN_FILE
    # Set EXTRA_CMAKE_FLAGS_ANDROID for future steps
    set +x
    echo "##vso[task.setvariable variable=EXTRA_CMAKE_FLAGS_ANDROID]-DCMAKE_TOOLCHAIN_FILE=$TOOLCHAIN_FILE"
    set -x
    # Add a llvm-config bash script (cannot run ARM executable)
    androidEnv="android"
    if [ "$ARCH" = "armv7a" ]; then androidEnv="androideabi"; fi
    LLVM_TRIPLE=$ARCH--linux-$androidEnv
    sed $BUILD_SOURCESDIRECTORY/.azure-pipelines/android-llvm-config.in \
      -e "s|@LLVM_VERSION@|$LLVM_VERSION|g" \
      -e "s|@LLVM_INSTALL_DIR@|$PWD/llvm-$ARCH|g" \
      -e "s|@LLVM_DEFAULT_TARGET_TRIPLE@|$LLVM_TRIPLE|g" \
      -e "s|@LLVM_TARGETS@|AArch64 ARM X86 WebAssembly|g" > llvm-$ARCH/bin/llvm-config
    chmod 755 llvm-$ARCH/bin/llvm-config
    # Set up DFLAGS for cross-compiling/linking with host ldmd2
    DFLAGS="-mtriple=$LLVM_TRIPLE -L-L$PWD/ldc-build-runtime.tmp/lib -gcc=$PWD/android-ndk-$ANDROID_NDK_VERSION/toolchains/llvm/prebuilt/linux-x86_64/bin/$ARCH-linux-${androidEnv}21-clang"
    set +x
    echo "##vso[task.setvariable variable=DFLAGS]$DFLAGS"
  displayName: Set up cross-compilation

# Cross-compile default libraries
- script: |
    set -ex
    cd ..
    IFS=$'\n' extraFlags=( $(xargs -n1 <<<"$EXTRA_CMAKE_FLAGS $EXTRA_CMAKE_FLAGS_CROSS $EXTRA_CMAKE_FLAGS_ANDROID") )
    bootstrap-ldc/bin/ldc-build-runtime --ninja -j $PARALLEL_JOBS \
      --dFlags="-fvisibility=hidden;${DFLAGS// /;}" \
      --targetSystem='Android;Linux;UNIX' \
      --ldcSrcDir=$BUILD_SOURCESDIRECTORY \
      "${extraFlags[@]#-D}"
  displayName: Cross-compile default libraries

# Cross-compile LDC executables
- script: |
    set -ex
    cd ..
    installDir=$PWD/install
    mkdir build-$ARCH
    cd build-$ARCH
    IFS=$'\n' extraFlags=( $(xargs -n1 <<<"$EXTRA_CMAKE_FLAGS $EXTRA_CMAKE_FLAGS_CROSS $EXTRA_CMAKE_FLAGS_ANDROID") )
    cmake -G Ninja $BUILD_SOURCESDIRECTORY \
      -DCMAKE_BUILD_TYPE=Release \
      -DLLVM_ROOT_DIR=$PWD/../llvm-$ARCH \
      -DD_COMPILER=$PWD/../bootstrap-ldc/bin/ldmd2 \
      -DCMAKE_INSTALL_PREFIX=$installDir \
      -DINCLUDE_INSTALL_DIR=$installDir/import \
      -DD_LINKER_ARGS="-fuse-ld=bfd;-L$PWD/../ldc-build-runtime.tmp/lib;-lphobos2-ldc;-ldruntime-ldc" \
      "${extraFlags[@]}"
    ninja -j$PARALLEL_JOBS ldc2 ldmd2 ldc-build-runtime ldc-profdata ldc-prune-cache
  displayName: 'Cross-compile LDC executables'
