# Each step starts in the checked-out source directory,
# environment variables aren't persisted across steps.

steps:

- script: |
    :: Use Windows CRLF line endings for checked-out text files
    git config --global core.autocrlf true
    set
  displayName: Print environment variables

- checkout: self
  submodules: true
  fetchDepth: 50

# Prerequisites
- script: |
    echo on
    cd ..
    :: Download & extract libcurl
    curl --max-time 60 --retry 3 -L -o libcurl.7z https://github.com/ldc-developers/mingw-w64-libs/releases/download/v8.0.0/libcurl-7.74.0-zlib-static-ipv6-sspi-schannel.7z 2>&1
    mkdir libcurl
    cd libcurl
    7z x ../libcurl.7z > nul
    mkdir ldc2
    if "%MODEL%" == "64" (
      cp dmd2/windows/bin%MODEL%/libcurl.dll ldc2
      cp dmd2/windows/lib%MODEL%/*.* ldc2
    ) else (
      cp dmd2/windows/bin/libcurl.dll ldc2
      cp dmd2/windows/lib32mscoff/*.* ldc2
    )
    cd ..
    :: Download & extract Ninja
    curl --max-time 60 --retry 3 -L -o ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-win.zip 2>&1
    mkdir ninja
    cd ninja
    7z x ../ninja.zip > nul
    cd ..
    :: Install lit
    python -m pip install --user setuptools wheel
    python -m pip install --user lit
    python -c "import lit.main; lit.main.main();" --version . | head -n 1
    :: Download & extract host LDC
    curl --max-time 300 --retry 3 -L -o ldc2.7z http://github.com/ldc-developers/ldc/releases/download/v%HOST_LDC_VERSION%/ldc2-%HOST_LDC_VERSION%-windows-multilib.7z 2>&1
    7z x ldc2.7z > nul
    mv ldc2-%HOST_LDC_VERSION%-windows-multilib host-ldc
    :: Download & extract GNU make (for druntime integration tests)
    curl --max-time 60 --retry 3 -L -o make.7z https://dl.dropboxusercontent.com/s/4y36f5ydgrk4p5g/make-4.2.1.7z?dl=0 2>&1
    mkdir gnu
    cd gnu
    7z x ../make.7z > nul
    mv make.exe gmake.exe
    cd ..
    :: Download & extract LDC-flavoured LLVM
    set ASSERTS_SUFFIX=
    if not "%BUILD_SOURCEBRANCH:~0,10%" == "refs/tags/" ( set ASSERTS_SUFFIX=-withAsserts)
    set LLVM_RELEASE_TAG=CI
    echo "%LLVM_VERSION%" | find "." > nul && set LLVM_RELEASE_TAG=ldc-v%LLVM_VERSION%
    curl --max-time 300 --retry 3 -L -o llvm.7z https://github.com/ldc-developers/llvm-project/releases/download/%LLVM_RELEASE_TAG%/llvm-%LLVM_VERSION%-windows-%ARCH%%ASSERTS_SUFFIX%.7z 2>&1
    mkdir llvm
    cd llvm
    7z x ../llvm.7z > nul
    cd ..
    :: Download & install clang
    curl --max-time 300 --retry 3 -L -o clang.exe https://github.com/llvm/llvm-project/releases/download/llvmorg-%CLANG_VERSION%/LLVM-%CLANG_VERSION%-win64.exe 2>&1
    clang.exe /S
  displayName: Install prerequisites

# Build bootstrap LDC
- script: |
    echo on
    cd ..
    set PATH=C:\Program Files\LLVM\bin;%CD%\ninja;%CD%\gnu;%PATH%
    call "%LDC_VSDIR%\Common7\Tools\VsDevCmd.bat" -arch=%ARCH%
    echo on
    cmake --version
    ninja --version
    clang-cl --version
    mkdir bootstrap-ldc
    cd bootstrap-ldc
    cmake -G Ninja %BUILD_SOURCESDIRECTORY% -DCMAKE_C_COMPILER:PATH=clang-cl.exe -DCMAKE_CXX_COMPILER:PATH=clang-cl.exe -DCMAKE_BUILD_TYPE=Release -DLLVM_ROOT_DIR=%CD%/../llvm -DD_COMPILER=%CD%/../host-ldc/bin/ldmd2 -DBUILD_SHARED_LIBS=OFF -DBUILD_LTO_LIBS=ON
    ninja -j4 || exit /b
    bin\ldc2 --version
  displayName: Build bootstrap LDC

# Build
- script: |
    echo on
    cd ..
    set PATH=C:\Program Files\LLVM\bin;%CD%\ninja;%CD%\gnu;%PATH%
    call "%LDC_VSDIR%\Common7\Tools\VsDevCmd.bat" -arch=%ARCH%
    echo on
    set INSTALL_DIR=%CD%/install
    mkdir build
    cd build
    cmake -G Ninja %BUILD_SOURCESDIRECTORY% -DCMAKE_C_COMPILER:PATH=clang-cl.exe -DCMAKE_CXX_COMPILER:PATH=clang-cl.exe -DCMAKE_BUILD_TYPE=Release -DLLVM_ROOT_DIR=%CD%/../llvm -DD_COMPILER=%CD%/../bootstrap-ldc/bin/ldmd2 -DCMAKE_INSTALL_PREFIX=%INSTALL_DIR% -DINCLUDE_INSTALL_DIR=%INSTALL_DIR%/import %EXTRA_CMAKE_FLAGS%
    ninja -j4 all ldc2-unittest all-test-runners || exit /b
    bin\ldc2 --version
  displayName: Build LDC & LDC D unittests & defaultlib unittest runners

# Tests
- script: |
    cd ..
    cd build
    ctest --output-on-failure -R "ldc2-unittest"
  displayName: Run LDC D unittests
  condition: succeededOrFailed()
- script: |
    cd ..
    :: strings_cdb has regressed for 32-bit starting with the VS 2019 v16.6.0 Azure Image (worked fine until v16.5.4)
    :: it also works fine on my box with the same v16.7.2...
    if "%MODEL%" == "32" ( del %BUILD_SOURCESDIRECTORY%\tests\debuginfo\strings_cdb.d)
    call "%LDC_VSDIR%\Common7\Tools\VsDevCmd.bat" -arch=%ARCH%
    cd build
    ctest -V -R "lit-tests"
  displayName: Run LIT testsuite
  condition: succeededOrFailed()
- script: |
    cd ..
    :: git's usr/bin/bash, unlike its bin/bash, leaves PATH as-is
    :: also add druntime/Phobos DLL dir to PATH
    set PATH=%CD%\build\lib;C:\Program Files\Git\usr\bin;%PATH%
    call "%LDC_VSDIR%\Common7\Tools\VsDevCmd.bat" -arch=%ARCH%
    set DMD_TESTSUITE_MAKE_ARGS=-j4
    cd build
    ctest -V -R "dmd-testsuite"
  displayName: Run DMD testsuite
  condition: succeededOrFailed()
- script: |
    cd ..
    :: Add druntime/Phobos/libcurl.dll dir to PATH
    set PATH=%CD%\build\lib;%CD%\libcurl\ldc2;C:\Program Files\Git\usr\bin;%PATH%
    call "%LDC_VSDIR%\Common7\Tools\VsDevCmd.bat" -arch=%ARCH%
    cd build
    ctest -j4 --output-on-failure -E "dmd-testsuite|lit-tests|ldc2-unittest"
  displayName: Run defaultlib unittests & druntime integration tests
  condition: succeededOrFailed()
