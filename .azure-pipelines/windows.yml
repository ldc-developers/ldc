# Each step starts in the checked-out source directory,
# environment variables aren't persisted across steps.

steps:
- script: |
    :: Use Windows CRLF line endings for checked-out text files
    git config --global core.autocrlf true
    set
  displayName: Print environment variables
- checkout: self
  submodules: true
  fetchDepth: 50
- script: |
    echo on
    cd ..
    :: Download & extract libcurl
    curl -L -o libcurl.7z https://github.com/ldc-developers/mingw-w64-libs/releases/download/v7.0.0/libcurl-7.69.1-zlib-static-ipv6-sspi-winssl.7z 2>&1
    mkdir libcurl
    cd libcurl
    7z x ../libcurl.7z > nul
    mkdir ldc2
    if "%MODEL%" == "64" (
      cp dmd2/windows/bin%MODEL%/libcurl.dll ldc2
      cp dmd2/windows/lib%MODEL%/*.* ldc2
    ) else (
      cp dmd2/windows/bin/libcurl.dll ldc2
      cp dmd2/windows/lib32mscoff/*.* ldc2
    )
    cd ..
    :: Download & extract Ninja
    curl -L -o ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-win.zip 2>&1
    mkdir ninja
    cd ninja
    7z x ../ninja.zip > nul
    cd ..
    :: Install lit
    python -m pip install --user lit
    python -c "import lit; lit.main();" --version . | head -n 1
    :: Download & extract host LDC
    curl -L -o ldc2.7z http://github.com/ldc-developers/ldc/releases/download/v%HOST_LDC_VERSION%/ldc2-%HOST_LDC_VERSION%-windows-multilib.7z 2>&1
    7z x ldc2.7z > nul
    mv ldc2-%HOST_LDC_VERSION%-windows-multilib host-ldc
    :: Download & extract GNU make (for dmd-testsuite & druntime stand-alone tests)
    curl -L -o make.7z https://dl.dropboxusercontent.com/s/4y36f5ydgrk4p5g/make-4.2.1.7z?dl=0 2>&1
    mkdir gnu
    cd gnu
    7z x ../make.7z > nul
    mv make.exe gmake.exe
    cd ..
    :: Download & extract a *working* GNU grep
    :: (version 3.1 bundled with newer git (v2.19+) seems to be buggy wrt. output line-endings)
    curl -L -o grep.7z https://dl.dropboxusercontent.com/s/vwlfgz8wv1fmqnn/grep-3.0.7z?dl=0 2>&1
    cd gnu
    7z x ../grep.7z > nul
    cd ..
    :: Download & extract LDC-flavoured LLVM
    set ASSERTS_SUFFIX=
    if not "%BUILD_SOURCEBRANCH:~0,10%" == "refs/tags/" ( set ASSERTS_SUFFIX=-withAsserts)
    curl -L -o llvm.7z https://github.com/ldc-developers/llvm-project/releases/download/ldc-v%LLVM_VERSION%/llvm-%LLVM_VERSION%-windows-%ARCH%%ASSERTS_SUFFIX%.7z 2>&1
    mkdir llvm
    cd llvm
    7z x ../llvm.7z > nul
    cd ..
    :: Download & install clang
    curl -L -o clang.exe http://releases.llvm.org/%CLANG_VERSION%/LLVM-%CLANG_VERSION%-win64.exe 2>&1
    clang.exe /S
  displayName: Install prerequisites
- script: |
    echo on
    cd ..
    :: LLVM bin dir in PATH required for lld-link.exe
    :: git's usr/bin required to make GNU find precede MS one in C:\Windows\System32
    set PATH=%CD%\llvm\bin;C:\Program Files\LLVM\bin;%CD%\ninja;%CD%\gnu;C:\Program Files\Git\usr\bin;%PATH%
    call "%VSINSTALLDIR%Common7\Tools\VsDevCmd.bat" -arch=%ARCH%
    echo on
    cmake --version
    ninja --version
    clang-cl --version
    mkdir bootstrap-ldc
    cd bootstrap-ldc
    cmake -G Ninja %BUILD_SOURCESDIRECTORY% -DCMAKE_C_COMPILER:PATH=clang-cl.exe -DCMAKE_CXX_COMPILER:PATH=clang-cl.exe -DCMAKE_BUILD_TYPE=Release -DLLVM_ROOT_DIR=%CD%/../llvm -DD_COMPILER=%CD%/../host-ldc/bin/ldmd2 -DBUILD_LTO_LIBS=ON
    ninja -j2 || exit /b
    bin\ldc2 --version
  displayName: Build bootstrap LDC
- script: |
    echo on
    cd ..
    set PATH=%CD%\llvm\bin;C:\Program Files\LLVM\bin;%CD%\ninja;%CD%\gnu;C:\Program Files\Git\usr\bin;%PATH%
    call "%VSINSTALLDIR%Common7\Tools\VsDevCmd.bat" -arch=%ARCH%
    echo on
    set INSTALL_DIR=%CD%/install
    mkdir build
    cd build
    cmake -G Ninja %BUILD_SOURCESDIRECTORY% -DCMAKE_C_COMPILER:PATH=clang-cl.exe -DCMAKE_CXX_COMPILER:PATH=clang-cl.exe -DCMAKE_BUILD_TYPE=Release %EXTRA_CMAKE_FLAGS% -DCMAKE_INSTALL_PREFIX=%INSTALL_DIR% -DINCLUDE_INSTALL_DIR=%INSTALL_DIR%/import -DLLVM_ROOT_DIR=%CD%/../llvm -DD_COMPILER=%CD%/../bootstrap-ldc/bin/ldmd2
    ninja -j2 all ldc2-unittest all-test-runners || exit /b
    bin\ldc2 --version
  displayName: Build LDC & LDC D unittests & defaultlib unittest runners
- script: |
    cd ..
    call "%VSINSTALLDIR%Common7\Tools\VsDevCmd.bat" -arch=%ARCH%
    cd build
    ctest --output-on-failure -R "ldc2-unittest"
  displayName: Run LDC D unittests
  condition: succeededOrFailed()
- script: |
    cd ..
    set PATH=%CD%\llvm\bin;%PATH%
    :: strings_cdb has regressed for 32-bit with VS 2019 v16.6.0 (worked fine until v16.5.4)
    if "%MODEL%" == "32" ( del %BUILD_SOURCESDIRECTORY%\tests\debuginfo\strings_cdb.d)
    call "%VSINSTALLDIR%Common7\Tools\VsDevCmd.bat" -arch=%ARCH%
    cd build
    ctest -V -R "lit-tests"
  displayName: Run LIT testsuite
  condition: succeededOrFailed()
- script: |
    cd ..
    :: git's usr/bin/bash, unlike its bin/bash, leaves PATH as-is
    set PATH=%CD%\gnu;C:\Program Files\Git\usr\bin;%PATH%
    call "%VSINSTALLDIR%Common7\Tools\VsDevCmd.bat" -arch=%ARCH%
    set DMD_TESTSUITE_MAKE_ARGS=-j2
    cd build
    ctest -V -R "dmd-testsuite"
  displayName: Run DMD testsuite
  condition: succeededOrFailed()
- script: |
    cd ..
    :: Add libcurl.dll dir to PATH
    set PATH=%CD%\libcurl\ldc2;%CD%\gnu;C:\Program Files\Git\usr\bin;%PATH%
    call "%VSINSTALLDIR%Common7\Tools\VsDevCmd.bat" -arch=%ARCH%
    cd build
    ctest -j2 --output-on-failure -E "dmd-testsuite|lit-tests|ldc2-unittest"
  displayName: Run defaultlib unittests & druntime stand-alone tests
  condition: succeededOrFailed()
- script: |
    cd ..
    set PATH=%CD%\ninja;%PATH%
    cd build
    ninja install > nul || exit /b
    cd ..
    powershell -c "(cat install/etc/ldc2.conf).replace('%CD:\=/%/install/', '%%%%ldcbinarypath%%%%/../') | Set-Content install/etc/ldc2.conf"
    cat install/etc/ldc2.conf
    cp %BUILD_SOURCESDIRECTORY%/LICENSE install
    cp %BUILD_SOURCESDIRECTORY%/packaging/README.txt install
    cp libcurl/ldc2/libcurl.dll install/bin
    cp libcurl/ldc2/*.* install/lib
    :: Now rename the installation dir to test portability
    mv install installed
  displayName: Install LDC, make portable & copy curl
- script: |
    cd ..
    cp llvm/bin/lld-link.exe installed/bin
    curl -L -o mingw-w64-libs.7z https://github.com/ldc-developers/mingw-w64-libs/releases/download/v7.0.0/mingw-w64-libs-v7.0.0.7z 2>&1
    mkdir mingw-w64-libs
    cd mingw-w64-libs
    7z x ../mingw-w64-libs.7z > nul
    cp -r lib%MODEL% ../installed/lib/mingw
  displayName: Copy lld-link.exe & MinGW-w64-based libs
- script: |
    cd ..
    call "%VSINSTALLDIR%Common7\Tools\VsDevCmd.bat" -arch=%ARCH%
    powershell -c "echo 'void main() { import std.stdio; writefln(\"Hello world, %%d bits\", size_t.sizeof * 8); }'" > hello.d
    installed\bin\ldc2 hello.d -of=hello_thin.exe -flto=thin -defaultlib=phobos2-ldc-lto,druntime-ldc-lto
    hello_thin.exe || exit /b
    installed\bin\ldc2 hello.d -of=hello_full.exe -flto=full -defaultlib=phobos2-ldc-lto,druntime-ldc-lto
    hello_full.exe
  displayName: Run hello-world integration test with LTO
- script: |
    cd ..
    :: Add ldc-jit.dll dir to PATH
    set PATH=%CD%\installed\lib;%PATH%
    call "%VSINSTALLDIR%Common7\Tools\VsDevCmd.bat" -arch=%ARCH%
    installed\bin\ldc2 -enable-dynamic-compile -run %BUILD_SOURCESDIRECTORY%/tests/dynamiccompile/array.d
  displayName: Run dynamic-compile integration test
- script: |
    cd ..
    call "%VSINSTALLDIR%Common7\Tools\VsDevCmd.bat" -arch=%ARCH%
    set DMD=%CD%\installed\bin\ldmd2
    git clone --recursive https://github.com/dlang/dub.git 2>&1
    cd dub
    powershell -c "git checkout \"$(cat %BUILD_SOURCESDIRECTORY%/packaging/dub_version -Raw)\"" 2>&1
    %DMD% -run build.d -O -w 2>&1 || exit /b
    cp bin/dub.exe ../installed/bin
    ..\installed\bin\dub --version
  displayName: Build & copy dub
- script: |
    cd ..
    call "%VSINSTALLDIR%Common7\Tools\VsDevCmd.bat" -arch=%ARCH%
    set DMD=%CD%\installed\bin\ldmd2
    git clone --recursive https://github.com/dlang/tools.git dlang-tools 2>&1
    cd dlang-tools
    %DMD% -w -de -dip1000 rdmd.d || exit /b
    %DMD% -w -de -dip1000 ddemangle.d || exit /b
    %DMD% -w -de -dip1000 DustMite\dustmite.d DustMite\splitter.d || exit /b
    cp *.exe ../installed/bin
  displayName: Build & copy dlang tools
- script: |
    cd ..
    if "%BUILD_SOURCEBRANCH:~0,10%" == "refs/tags/" (
      set ARTIFACT_ID=%BUILD_SOURCEBRANCH:~11%
    ) else (
      set ARTIFACT_ID=%BUILD_SOURCEVERSION:~0,8%
    )
    set ARTIFACT_NAME=ldc2-%ARTIFACT_ID%-windows-%ARCH%
    mv installed %ARTIFACT_NAME%
    mkdir artifacts
    7z a -mx=9 artifacts/%ARTIFACT_NAME%.7z %ARTIFACT_NAME% > nul
  displayName: Pack installation dir
- publish: ../artifacts
  artifact: windows-$(ARCH)
