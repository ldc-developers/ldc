# Clones the git repos, installs prerequisites and builds the first (bootstrap)
# compiler.
#
# Required env vars:
# - BOOTSTRAP_CMAKE_FLAGS (optional)
# - CI_OS
# - CLANG_VERSION
# - HOST_LDC_VERSION
# - LLVM_VERSION
# Exported env var:
# - PARALLEL_JOBS

steps:

# Clone
- checkout: self
  submodules: true
  fetchDepth: 50

# Install prerequisites
- script: |
    set -ex
    cd ..
    if [ "$CI_OS" = "osx" ]; then
      # Download & extract Ninja
      curl --max-time 60 --retry 3 -L -o ninja-mac.zip https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-mac.zip
      mkdir ninja
      tar -xf ninja-mac.zip -C ninja
    else
      export DEBIAN_FRONTEND=noninteractive
      sudo dpkg --add-architecture i386
      sudo apt-get -q update
      # Don't use latest gdb v10 from Ubuntu toolchain PPA with regressions, use official v8
      sudo apt-get -yq install \
        git-core cmake ninja-build g++-multilib \
        libcurl4 libcurl4:i386 \
        curl gdb=8.1.1-0ubuntu1 p7zip-full tzdata unzip zip python3-pip
      # Download & extract clang
      curl --max-time 300 --retry 3 -L -o clang.tar.xz https://github.com/llvm/llvm-project/releases/download/llvmorg-$CLANG_VERSION/clang+llvm-$CLANG_VERSION-x86_64-linux-gnu-ubuntu-16.04.tar.xz
      mkdir clang
      tar -xf clang.tar.xz --strip 1 -C clang
    fi
    # Install lit
    python3 --version
    python3 -m pip install --user setuptools wheel
    python3 -m pip install --user lit
    python3 -c "import lit.main; lit.main.main();" --version . | head -n 1
    # Download & extract host LDC
    HOST_OS="$CI_OS"
    if [ "$CI_OS" = "android" ]; then HOST_OS="linux"; fi
    curl --max-time 300 --retry 3 -L -o ldc2.tar.xz https://github.com/ldc-developers/ldc/releases/download/v$HOST_LDC_VERSION/ldc2-$HOST_LDC_VERSION-$HOST_OS-x86_64.tar.xz
    mkdir host-ldc
    tar -xf ldc2.tar.xz --strip 1 -C host-ldc
    # Download & extract LDC-flavoured LLVM
    assertsSuffix=""
    if [ "${BUILD_SOURCEBRANCH:0:10}" != "refs/tags/" ]; then
      assertsSuffix="-withAsserts"
    fi
    if [[ "$LLVM_VERSION" = *.* ]]; then
      curl --max-time 300 --retry 3 -L -o llvm.tar.xz https://github.com/ldc-developers/llvm-project/releases/download/ldc-v$LLVM_VERSION/llvm-$LLVM_VERSION-$HOST_OS-x86_64$assertsSuffix.tar.xz
    else
      curl --max-time 300 --retry 3 -L -o llvm.tar.xz https://github.com/ldc-developers/llvm-project/releases/download/CI/llvm-$LLVM_VERSION-$HOST_OS-x86_64$assertsSuffix.tar.xz
    fi
    mkdir llvm
    tar -xf llvm.tar.xz --strip 1 -C llvm
    # Set PARALLEL_JOBS env variable and persist it for future steps
    if [ "$CI_OS" = "osx" ]; then
      PARALLEL_JOBS=$(sysctl -n hw.logicalcpu)
    else
      PARALLEL_JOBS=$(nproc)
    fi
    set +x
    echo "##vso[task.setvariable variable=PARALLEL_JOBS]$PARALLEL_JOBS"
  displayName: Install prerequisites

# Build bootstrap LDC
- script: |
    set -ex
    cd ..
    export PATH="$PWD/ninja:$PATH" # for macOS
    cmake --version
    ninja --version
    mkdir bootstrap-ldc
    cd bootstrap-ldc
    cmake -G Ninja $BUILD_SOURCESDIRECTORY \
      -DCMAKE_BUILD_TYPE=Release \
      -DLLVM_ROOT_DIR=$PWD/../llvm \
      -DD_COMPILER=$PWD/../host-ldc/bin/ldmd2 \
      -DBUILD_SHARED_LIBS=OFF \
      -DLDC_LINK_MANUALLY=OFF \
      $BOOTSTRAP_CMAKE_FLAGS
    ninja -j$PARALLEL_JOBS
    bin/ldc2 -version
  displayName: Build bootstrap LDC
