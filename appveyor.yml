#---------------------------------#
#      general configuration      #
#---------------------------------#

#version: 1.0.{build}-{branch}

# Do not build on tags (GitHub only)
skip_tags: true

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Operating system (build VM template)
os: Visual Studio 2017

environment:
  matrix:
    - APPVEYOR_JOB_ARCH:   x64
    - APPVEYOR_JOB_ARCH:   x86

#matrix:
#  allow_failures:
#    - APPVEYOR_JOB_ARCH: x86

# scripts that are called at very beginning, before repo cloning
init:
  - git config --global core.autocrlf input

# scripts that run after cloning repository
install:
  - cd c:\projects
  # Fetch submodules
  - cd ldc
  - git submodule update --init --recursive
  - cd ..
  # Clone libconfig (v1.6 does not work due to https://github.com/hyperrealm/libconfig/issues/47)
  - git clone https://github.com/hyperrealm/libconfig.git libconfig
  - cd libconfig
  - git checkout 7585cf6
  - cd ..
  # Download & extract libcurl
  - appveyor DownloadFile "https://dl.dropboxusercontent.com/s/jxwohqax4e2avyt/libcurl-7.48.0-WinSSL-zlib-x86-x64.zip?dl=0" -FileName libcurl.zip
  - md libcurl
  - cd libcurl
  - 7z x ..\libcurl.zip > nul
  - cd ..
  # Copy libcurl.dll to final LDC installation directory and add to PATH
  - md ldc-%APPVEYOR_JOB_ARCH% && md ldc-%APPVEYOR_JOB_ARCH%\bin
  - if "%APPVEYOR_JOB_ARCH%"=="x64" ( copy libcurl\dmd2\windows\bin64\libcurl.dll ldc-x64\bin )
  - if "%APPVEYOR_JOB_ARCH%"=="x86" ( copy libcurl\dmd2\windows\bin\libcurl.dll ldc-x86\bin )
  - set PATH=%CD%\ldc-%APPVEYOR_JOB_ARCH%\bin;%PATH%
  # Download & extract Ninja
  - appveyor DownloadFile "https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-win.zip" -FileName ninja.zip
  - md ninja
  - cd ninja
  - 7z x ..\ninja.zip > nul
  - ninja --version
  - cd ..
  # Install lit
  - python --version
  - python -m pip install lit
  - python -c "import lit; lit.main();" --version
  # Download & extract GNU make + utils (for dmd-testsuite)
  - bash --version
  - appveyor DownloadFile "https://dl.dropboxusercontent.com/s/4y36f5ydgrk4p5g/make-4.2.1.7z?dl=0" -FileName make.7z
  - md make
  - cd make
  - 7z x ..\make.7z > nul
  - make --version
  - cd ..
  # Download & extract a pre-built LLVM (CMAKE_BUILD_TYPE=Release, LLVM_ENABLE_ASSERTIONS=ON)
  - ps: |
        If ($Env:APPVEYOR_JOB_ARCH -eq 'x64') {
            appveyor DownloadFile 'https://dl.dropboxusercontent.com/s/nxw73qdy4dqs23p/LLVM-4.0.1-x64.7z?dl=0' -FileName llvm-x64.7z
        } Else {
            appveyor DownloadFile 'https://dl.dropboxusercontent.com/s/probihgpillkpuk/LLVM-4.0.1-x86.7z?dl=0' -FileName llvm-x86.7z
        }
  - md llvm-%APPVEYOR_JOB_ARCH%
  - cd llvm-%APPVEYOR_JOB_ARCH%
  - 7z x ..\llvm-%APPVEYOR_JOB_ARCH%.7z > nul
  - cd ..
  # Set environment variables
  - set PATH=%CD%\ninja;%CD%\make;%PATH%
  - call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Tools\VsDevCmd.bat" -arch=%APPVEYOR_JOB_ARCH%
  # Print environment info
  - set
  - msbuild /version
  - cl
  - cmake --version

#---------------------------------#
#       build configuration       #
#---------------------------------#

before_build:
  - cd c:\projects
  # Build libconfig
  - msbuild libconfig\lib\libconfig.vcxproj /p:Configuration=ReleaseStatic /p:Platform=x64
  - msbuild libconfig\lib\libconfig.vcxproj /p:Configuration=ReleaseStatic /p:Platform=x86

build_script:
  - cd c:\projects
  # Generate build files for LDC
  - md ninja-ldc
  - cd ninja-ldc
  - if "%APPVEYOR_JOB_ARCH%"=="x64" ( cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=c:\projects\ldc-x64 -DLIBCONFIG_INCLUDE_DIR=c:/projects/libconfig/lib -DLIBCONFIG_LIBRARY=c:/projects/libconfig/lib/x64/ReleaseStatic/libconfig.lib -DLLVM_ROOT_DIR=c:/projects/llvm-x64 ..\ldc )
  - if "%APPVEYOR_JOB_ARCH%"=="x86" ( cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=c:\projects\ldc-x86 -DLIBCONFIG_INCLUDE_DIR=c:/projects/libconfig/lib -DLIBCONFIG_LIBRARY=c:/projects/libconfig/lib/x86/ReleaseStatic/libconfig.lib -DLLVM_ROOT_DIR=c:/projects/llvm-x86 ..\ldc )
  # Work around LDC issue #930
  - ps: (gc build.ninja).replace('runtime/std/string-unittest-debug.obj -w -g -link-debuglib -unittest', 'runtime/std/string-unittest-debug.obj -w -link-debuglib -unittest') | sc build.ninja
  # Build LDC, druntime and phobos
  - ninja -j2

#---------------------------------#
#       test configuration        #
#---------------------------------#

test_script:
  - cd c:\projects\ninja-ldc
  - bin\ldc2 -version
  # Compile, link & execute a hello-world program
  - ps: 'echo "import std.stdio; void main() { writeln(""Hello world!""); }" > hello.d'
  - if "%APPVEYOR_JOB_CONFIG%"=="Debug" ( bin\ldc2 -g hello.d ) else ( bin\ldc2 hello.d )
  - hello.exe
  # Compile the druntime & phobos unit tests
  - set TEST_SUFFIX=unittest
  - if "%APPVEYOR_JOB_CONFIG%"=="Debug" ( set TEST_SUFFIX=unittest-debug)
  # (pre-build some modules serially - those known to require lots of memory)
  - ninja -j1 runtime\std\algorithm\searching-%TEST_SUFFIX%.obj runtime\std\algorithm\setops-%TEST_SUFFIX%.obj runtime\std\array-%TEST_SUFFIX%.obj runtime\std\conv-%TEST_SUFFIX%.obj runtime\std\datetime-%TEST_SUFFIX%.obj runtime\std\range\package-%TEST_SUFFIX%.obj runtime\std\range\primitives-%TEST_SUFFIX%.obj runtime\std\regex\internal\tests-%TEST_SUFFIX%.obj runtime\std\string-%TEST_SUFFIX%.obj runtime\std\traits-%TEST_SUFFIX%.obj
  - ninja -j2 druntime-ldc-%TEST_SUFFIX% phobos2-ldc-%TEST_SUFFIX%
  # Execute the LLVM IR tests
  - ctest --output-on-failure -R llvm-ir-testsuite
  # Execute the unit tests; exclude dmd-testsuite for now
  - set CTEST_SUFFIX=-E "-debug|testsuite"
  - if "%APPVEYOR_JOB_CONFIG%"=="Debug" ( set CTEST_SUFFIX=-R -debug -E testsuite)
  - ctest --output-on-failure %CTEST_SUFFIX%
