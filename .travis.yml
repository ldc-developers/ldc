dist: bionic
language: d

git:
  depth: 50

matrix:
  include:
    - os: linux
      arch: arm64
      d: ldc-1.26.0
      env: LLVM_VERSION=12.0.0 CC=gcc-8 CXX=g++-8 OPTS="-DLDC_INSTALL_LLVM_RUNTIME_LIBS_ARCH=aarch64 -DADDITIONAL_DEFAULT_LDC_SWITCHES='\"-linker=bfd\",' -DCOMPILE_ALL_D_FILES_AT_ONCE=OFF"

cache:
  directories:
    - llvm-$LLVM_VERSION

addons:
  apt:
    packages:
      - g++-8
      - gdb
      - ninja-build

# Download & extract prebuilt LLVM if not in cache
before_install:
  - nproc
  - free
  - export LLVM_ROOT_DIR="$PWD/llvm-$LLVM_VERSION"
  - |
    if [ ! -e "$LLVM_ROOT_DIR/bin/llvm-config" ]; then
      llvm_tag="CI"
      if [[ "$LLVM_VERSION" = *.* ]]; then llvm_tag="ldc-v$LLVM_VERSION"; fi
      llvm_url="https://github.com/ldc-developers/llvm-project/releases/download/$llvm_tag/llvm-$LLVM_VERSION-linux-aarch64-withAsserts.tar.xz"
      wget -nv -O llvm.tar.xz $llvm_url
      mkdir -p $LLVM_ROOT_DIR
      tar -xf llvm.tar.xz --strip 1 -C $LLVM_ROOT_DIR
      rm llvm.tar.xz
    fi

install:
  # Install lit
  - python3 -m pip install --user lit
  - |
    set -o pipefail
    python3 -c "import lit.main; lit.main.main();" --version . | head -n 1

script:
  - unset LD_LIBRARY_PATH
  - cmake --version
  - ninja --version
  - |
    cmake -G Ninja . \
      -DCMAKE_BUILD_TYPE=Release \
      -DLLVM_ROOT_DIR=$LLVM_ROOT_DIR \
      -DLDC_LINK_MANUALLY=OFF \
      $OPTS
  # Build LDC & LDC D unittests & defaultlib unittest runners
  - |
    # Work around out-of-memory errors - retry with decreasing jobs
    targets='all ldc2-unittest all-test-runners'
    ninja -j8 -k0 $targets || \
      ninja -j8 -k0 $targets || \
      ninja -j2 -k0 $targets || \
      ninja -j1 $targets
  - bin/ldc2 -version || exit 1
  # Run LDC D unittests
  - ctest --output-on-failure -R "ldc2-unittest"
  # FIXME: all gdb tests fail and are disabled
  - rm tests/debuginfo/*_gdb.d
  - rm tests/d2/dmd-testsuite/runnable/b18504.d
  # Run LIT testsuite
  # FIXME: don't ignore errors
  - ctest -V -R "lit-tests" || true
  # Run DMD testsuite
  - DMD_TESTSUITE_MAKE_ARGS="-j8 GDB_FLAGS=OFF" ctest -V -R "dmd-testsuite"
  # Run defaultlib unittests & druntime integration tests
  # FIXME: don't exclude hanging core.thread.fiber & don't ignore errors
  - ctest -j8 --output-on-failure -E "dmd-testsuite|lit-tests|ldc2-unittest|^core.thread.fiber($|-)" || true

after_success:
  - |
    if [[ "$OPTS" == *-DTEST_COVERAGE?ON* ]]; then
      coveralls -e runtime -e tests -e vcbuild --gcov gcov-4.9 --gcov-options '\-lp' > /dev/null 2>&1
    fi

notifications:
  email:
    recipients:
      - "digitalmars-d-ldc@puremagic.com"
    on_success: never
    on_failure: change
  irc:
    channels:
      - "irc.freenode.org#ldc"
    on_success: always
    on_failure: always
    use_notice: false
    skip_join: true
