dist: xenial
language: d

git:
  depth: 50

matrix:
  include:
    - os: linux
      arch: arm64
      d: ldc-beta
      env: LLVM_VERSION=10.0.1 PARALLELISM=16 CC=gcc-8 CXX=g++-8 OPTS="-DLDC_INSTALL_LLVM_RUNTIME_LIBS_ARCH=aarch64 -DADDITIONAL_DEFAULT_LDC_SWITCHES='\"-linker=bfd\",' -DCOMPILE_ALL_D_FILES_AT_ONCE=OFF"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - gdb
            - ninja-build
    - os: linux
      d: ldc-beta
      env: LLVM_VERSION=9.0.0 OPTS="-DBUILD_SHARED_LIBS=ON -DRT_SUPPORT_SANITIZERS=ON"
    - os: linux
      d: ldc-0.17.6
      env: LLVM_VERSION=8.0.0 OPTS="-DBUILD_SHARED_LIBS=OFF"
    # FIXME: strange crashes, possibly due to C++ compiler mismatch
    #- os: linux
    #  d: ldc
    #  env: LLVM_VERSION=7.0.1 OPTS="-DBUILD_SHARED_LIBS=ON"
    - os: linux
      d: dmd-beta
      env: LLVM_VERSION=6.0.1 OPTS="-DLIB_SUFFIX=64"
    - os: osx
      osx_image: xcode10.3
      d: dmd-beta
      env: LLVM_VERSION=10.0.0 OPTS="-DBUILD_SHARED_LIBS=ON -DRT_SUPPORT_SANITIZERS=ON"
    - os: osx
      osx_image: xcode10.3
      d: ldc-beta
      env: LLVM_VERSION=7.0.0 OPTS="-DBUILD_SHARED_LIBS=OFF"

cache:
  directories:
    - llvm-10.0.0
    - llvm-9.0.0
    - llvm-8.0.0
    - llvm-7.0.1
    - llvm-7.0.0
    - llvm-6.0.1

addons:
  apt:
    packages:
      - gdb
      - ninja-build

# Download & extract prebuilt vanilla LLVM if not in cache
before_install:
  - nproc
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then free; fi
  - export LLVM_ROOT_DIR="$PWD/llvm-$LLVM_VERSION"
  - |
    if [ ! -e "$LLVM_ROOT_DIR/bin/llvm-config" ]; then
      if [ "$TRAVIS_CPU_ARCH" = "arm64" ]; then
        llvm_url="https://github.com/ldc-developers/llvm-project/releases/download/ldc-v$LLVM_VERSION/llvm-$LLVM_VERSION-linux-aarch64-withAsserts.tar.xz"
      else
        if [ "$TRAVIS_OS_NAME" = "linux" ]; then
          LLVM_ARCH="x86_64-linux-gnu-ubuntu-16.04"
        elif [ "$LLVM_VERSION" = "9.0.0" ]; then
          LLVM_ARCH="x86_64-darwin-apple"
        else
          LLVM_ARCH="x86_64-apple-darwin"
        fi
        if [ "${LLVM_VERSION:0:1}" = "1" ]; then
          # v10+
          llvm_url="https://github.com/llvm/llvm-project/releases/download/llvmorg-$LLVM_VERSION/clang+llvm-$LLVM_VERSION-$LLVM_ARCH.tar.xz"
        else
          llvm_url="http://releases.llvm.org/$LLVM_VERSION/clang+llvm-$LLVM_VERSION-$LLVM_ARCH.tar.xz"
        fi
      fi
      wget -nv -O llvm.tar.xz $llvm_url
      mkdir -p $LLVM_ROOT_DIR
      tar -xf llvm.tar.xz --strip 1 -C $LLVM_ROOT_DIR
      rm llvm.tar.xz
    fi

install:
  - |
    if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      # Install pip
      wget -O get-pip.py https://bootstrap.pypa.io/get-pip.py
      sudo python get-pip.py
      rm get-pip.py
      # Download & extract Ninja & add to PATH
      wget -O ninja-mac.zip https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-mac.zip
      mkdir ninja
      tar -xf ninja-mac.zip -C ninja
      rm ninja-mac.zip
      export PATH="$PWD/ninja:$PATH"
    fi
  # Install lit
  - |
    if [ "$TRAVIS_CPU_ARCH" = "arm64" ]; then
      python -m pip install --user lit
    else
      pip install --user lit
    fi
  - python -c "import lit; lit.main();" --version . | head -n 1

script:
  - unset LD_LIBRARY_PATH
  - cmake --version
  - ninja --version
  - |
    cmake -G Ninja . \
      -DCMAKE_BUILD_TYPE=Release \
      -DLLVM_ROOT_DIR=$LLVM_ROOT_DIR \
      -DLDC_INSTALL_LTOPLUGIN=ON \
      -DLDC_INSTALL_LLVM_RUNTIME_LIBS=ON \
      $OPTS
  # Build LDC & LDC D unittests & defaultlib unittest runners
  - |
    numJobs=${PARALLELISM:-3}
    # The OSX VM has only 4 GB of memory (Linux: 7.5)
    if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      numJobs=2
    fi
    ninja -j$numJobs all ldc2-unittest all-test-runners
  - bin/ldc2 -version || exit 1
  # Run LDC D unittests
  - ctest --output-on-failure -R "ldc2-unittest"
  # AArch64 FIXME: all gdb tests fail and are disabled
  - |
    if [ "$TRAVIS_CPU_ARCH" = "arm64" ]; then
      rm tests/debuginfo/*_gdb.d
      rm tests/d2/dmd-testsuite/runnable/b18504.d
    fi
  # Run LIT testsuite
  - |
    if [ "$TRAVIS_CPU_ARCH" = "arm64" ]; then
      # AArch64 FIXME: don't ignore errors
      ctest -V -R "lit-tests" || true
    else
      ctest -V -R "lit-tests"
    fi
  # Run DMD testsuite
  - |
    if [[ "$($DC --version | head -n 1)" == *0.17.* ]]; then
      # The -lowmem tests don't work with an ltsmaster host compiler
      rm tests/d2/dmd-testsuite/runnable/{testptrref,xtest46}_gc.d
      rm tests/d2/dmd-testsuite/fail_compilation/mixin_gc.d
      # The @live tests neither (LDC segfaults)
      rm tests/d2/dmd-testsuite/compilable/ob1.d
      rm tests/d2/dmd-testsuite/fail_compilation/fob{1,2}.d
    fi
  - |
    if [ "$TRAVIS_CPU_ARCH" = "arm64" ]; then
      DMD_TESTSUITE_MAKE_ARGS="-j${PARALLELISM:-3} GDB_FLAGS=OFF" ctest -V -R "dmd-testsuite"
    elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
      # dmd-testsuite-debug only to reduce time-outs
      DMD_TESTSUITE_MAKE_ARGS=-j${PARALLELISM:-3} ctest -V -R "build-run-dmd-testsuite|dmd-testsuite-debug"
    else
      DMD_TESTSUITE_MAKE_ARGS=-j${PARALLELISM:-3} ctest -V -R "dmd-testsuite"
    fi
  # Run defaultlib unittests & druntime stand-alone tests
  - |
    if [ "$TRAVIS_CPU_ARCH" = "arm64" ]; then
      # AArch64 FIXME: don't exclude hanging core.thread.fiber & don't ignore errors
      ctest -j${PARALLELISM:-3} --output-on-failure -E "dmd-testsuite|lit-tests|ldc2-unittest|^core.thread.fiber($|-)" || true
    else
      ctest -j${PARALLELISM:-3} --output-on-failure -E "dmd-testsuite|lit-tests|ldc2-unittest"
    fi

after_success:
  - |
    if [[ "$OPTS" == *-DTEST_COVERAGE?ON* ]]; then
      coveralls -e runtime -e tests -e vcbuild --gcov gcov-4.9 --gcov-options '\-lp' > /dev/null 2>&1
    fi

notifications:
  email:
    recipients:
      - "digitalmars-d-ldc@puremagic.com"
    on_success: never
    on_failure: change
  irc:
    channels:
      - "irc.freenode.org#ldc"
    on_success: always
    on_failure: always
    use_notice: false
    skip_join: true
