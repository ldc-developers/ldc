dist: trusty
language: d
sudo: false

matrix:
  include:
    # FIXME: strange crashes, possibly due to C++ compiler mismatch
    #- os: linux
    #  d: ldc
    #  env: LLVM_VERSION=7.0.1 OPTS="-DBUILD_SHARED_LIBS=ON"
    - os: linux
      d: ldc-beta
      env: LLVM_VERSION=6.0.1 OPTS="-DBUILD_SHARED_LIBS=OFF -DLIB_SUFFIX=64"
    - os: linux
      d: ldc
      env: LLVM_VERSION=5.0.2 OPTS="-DBUILD_SHARED_LIBS=ON -DLIB_SUFFIX=64"
    - os: linux
      d: ldc-0.17.6
      env: LLVM_VERSION=4.0.1 OPTS="-DLIB_SUFFIX=64"
    - os: linux
      d: dmd
      env: LLVM_VERSION=3.9.1 OPTS="-DTEST_COVERAGE=ON"
    - os: osx
      osx_image: xcode9.2
      d: dmd
      env: LLVM_VERSION=7.0.0 OPTS="-DBUILD_SHARED_LIBS=ON"
    - os: osx
      osx_image: xcode9.2
      d: ldc-beta
      env: LLVM_VERSION=8.0.0 OPTS="-DBUILD_SHARED_LIBS=OFF" LLVM_SPIRV_AVAILABLE=ON

cache:
  directories:
    - llvm-7.0.1
    - llvm-7.0.0
    - llvm-6.0.1
    - llvm-spirv-8.0.0
    - llvm-spirv
    - llvm-5.0.2
    - llvm-4.0.1
    - llvm-3.9.1

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-4.9
    - gdb
    - ninja-build

before_install:
  -
    export LLVM_ROOT_DIR="$PWD/llvm-$LLVM_VERSION";
    if [ -n "${LLVM_SPIRV_AVAILABLE}" ]; then
    	export LLVM_ROOT_DIR="$PWD/llvm-spirv-$LLVM_VERSION";
    	export PKG_CONFIG_PATH="$PWD/llvm-spirv/lib/pkgconfig";
    fi;
  -
    if [ ! -e "$LLVM_ROOT_DIR/bin/llvm-config" ]; then
      if [ -n "${LLVM_SPIRV_AVAILABLE}" ]; then
        wget -O llvm.tar.bz2 https://github.com/thewilsonator/llvm/releases/download/pre-intrinsics/LLVM-8.0.0svn-Darwin.tar.bz2;
        wget -O llvm-spirv.tar.bz2 https://github.com/thewilsonator/SPIRV-LLVM-Translator/releases/download/v8.0.0-a1/SPIRV-LLVM-Translator-a1.tar.bz2;
        mkdir -p llvm-spirv;
        tar -xf llvm-spirv.tar.bz2 --strip 1 -C `pwd`/llvm-spirv;
        rm llvm-spirv.tar.bz2;
      else
        if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
          if [ "${LLVM_VERSION}" = "4.0.1" ]; then
            export LLVM_ARCH="x86_64-linux-gnu-debian8";
          else
            export LLVM_ARCH="x86_64-linux-gnu-ubuntu-14.04";
          fi;
        else
          export LLVM_ARCH="x86_64-apple-darwin";
        fi;
        wget -O llvm.tar.xz http://releases.llvm.org/$LLVM_VERSION/clang+llvm-$LLVM_VERSION-${LLVM_ARCH}.tar.xz;
      fi;
      mkdir -p $LLVM_ROOT_DIR;
      tar -xf llvm.tar.* --strip 1 -C $LLVM_ROOT_DIR;
      rm llvm.tar.*;
      if [ -n "${LLVM_SPIRV_AVAILABLE}" ]; then
      	cp -f llvm-spirv/bin/llvm-spirv $LLVM_ROOT_DIR/bin/;
      fi
    fi

install:
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then export CC="gcc-4.9"; export CXX="g++-4.9"; fi
  -
    if [ "${TRAVIS_OS_NAME}" = "osx" ]; then
      wget -O get-pip.py https://bootstrap.pypa.io/get-pip.py;
      sudo python get-pip.py;
      wget -O ninja-mac.zip https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-mac.zip;
      mkdir ninja;
      tar -xf ninja-mac.zip -C ninja;
      export PATH="$PWD/ninja:$PATH";
    fi
  - pip install --user lit
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then ld --version; gdb --version; fi
  - cmake --version
  - ninja --version
  - python -c "import lit; lit.main();" --version | head -n 1
  - eval "${DC} --version"

script:
  # Invoke CMake to generate the Ninja build files.
  - cmake -G Ninja -DLLVM_ROOT_DIR=$LLVM_ROOT_DIR -DLDC_INSTALL_LLVM_RUNTIME_LIBS=ON $OPTS .
  # Build LDC and defaultlib unittest runners.
  # [Some unittest modules eat large amounts of memory during compilation => -j2.]
  - ninja -j2 all runtime/objects-unittest/std/algorithm/searching.o runtime/objects-unittest-debug/std/algorithm/searching.o runtime/objects-unittest/std/range/package.o runtime/objects-unittest-debug/std/range/package.o runtime/objects-unittest/std/regex/internal/tests.o runtime/objects-unittest-debug/std/regex/internal/tests.o
  - ninja -j3 all-test-runners
  # Output some environment info, plus make sure we only run the test suite
  # if we could actually build the executable.
  - bin/ldc2 -version || exit 1
  # Build and run LDC D unittests.
  - ctest --output-on-failure -R "ldc2-unittest"
  # Run LIT testsuite.
  - ctest -V -R "lit-tests"
  # Run DMD testsuite.
  # Optimized runnable/testconst.d crashes (in _aaInX) with shared libs on Linux -
  # only for Travis apparently.
  -
    if [ "${TRAVIS_OS_NAME}" = "linux" ] && [[ "${OPTS}" == *-DBUILD_SHARED_LIBS?ON* ]]; then
      rm tests/d2/dmd-testsuite/runnable/testconst.d;
    fi
  - DMD_TESTSUITE_MAKE_ARGS=-j3 ctest -V -R "dmd-testsuite"
  # Run defaultlib unittests & druntime stand-alone tests.
  - ctest -j3 --output-on-failure -E "dmd-testsuite|lit-tests|ldc2-unittest"

after_success:
  -
    if [[ "${OPTS}" == *-DTEST_COVERAGE?ON* ]]; then
      coveralls -e runtime -e tests -e vcbuild --gcov gcov-4.9 --gcov-options '\-lp' > /dev/null 2>&1;
    fi

notifications:
  email:
    recipients:
      - "digitalmars-d-ldc@puremagic.com"
    on_success: never
    on_failure: change
  irc:
    channels:
      - "irc.freenode.org#ldc"
    on_success: always
    on_failure: always
    use_notice: false
    skip_join: true
